'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("DataSetAccounting"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class DataSetAccounting
    Inherits Global.System.Data.DataSet
    
    Private tableCOA As COADataTable
    
  Private tableGroupTemplateTransaksi As GroupTemplateTransaksiDataTable

  Private tableJurnalD As JurnalDDataTable

  Private tableJurnalH As JurnalHDataTable

  Private tableTemplateTransaksi As TemplateTransaksiDataTable

  Private tableGroupAkun As GroupAkunDataTable

  Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema

  <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
   Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
  Public Sub New()
    MyBase.New()
    Me.BeginInit()
    Me.InitClass()
    Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
    AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
    AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
    Me.EndInit()
  End Sub

  <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
   Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
  Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
    MyBase.New(info, context, False)
    If (Me.IsBinarySerialized(info, context) = True) Then
      Me.InitVars(False)
      Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
      AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
      AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
      Return
    End If
    Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)), String)
    If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
      Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet()
      ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
      If (Not (ds.Tables("COA")) Is Nothing) Then
        MyBase.Tables.Add(New COADataTable(ds.Tables("COA")))
      End If
      If (Not (ds.Tables("GroupTemplateTransaksi")) Is Nothing) Then
        MyBase.Tables.Add(New GroupTemplateTransaksiDataTable(ds.Tables("GroupTemplateTransaksi")))
      End If
      If (Not (ds.Tables("JurnalD")) Is Nothing) Then
        MyBase.Tables.Add(New JurnalDDataTable(ds.Tables("JurnalD")))
      End If
      If (Not (ds.Tables("JurnalH")) Is Nothing) Then
        MyBase.Tables.Add(New JurnalHDataTable(ds.Tables("JurnalH")))
      End If
      If (Not (ds.Tables("TemplateTransaksi")) Is Nothing) Then
        MyBase.Tables.Add(New TemplateTransaksiDataTable(ds.Tables("TemplateTransaksi")))
      End If
      If (Not (ds.Tables("GroupAkun")) Is Nothing) Then
        MyBase.Tables.Add(New GroupAkunDataTable(ds.Tables("GroupAkun")))
      End If
      Me.DataSetName = ds.DataSetName
      Me.Prefix = ds.Prefix
      Me.Namespace = ds.Namespace
      Me.Locale = ds.Locale
      Me.CaseSensitive = ds.CaseSensitive
      Me.EnforceConstraints = ds.EnforceConstraints
      Me.Merge(ds, False, Global.System.Data.MissingSchemaAction.Add)
      Me.InitVars()
    Else
      Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
    End If
    Me.GetSerializationData(info, context)
    Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
    AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
    AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
  End Sub

  <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
   Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
   Global.System.ComponentModel.Browsable(False), _
   Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)> _
  Public ReadOnly Property COA() As COADataTable
    Get
      Return Me.tableCOA
    End Get
  End Property

  <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
   Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
   Global.System.ComponentModel.Browsable(False), _
   Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)> _
  Public ReadOnly Property GroupTemplateTransaksi() As GroupTemplateTransaksiDataTable
    Get
      Return Me.tableGroupTemplateTransaksi
    End Get
  End Property

  <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
   Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
   Global.System.ComponentModel.Browsable(False), _
   Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)> _
  Public ReadOnly Property JurnalD() As JurnalDDataTable
    Get
      Return Me.tableJurnalD
    End Get
  End Property

  <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
   Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
   Global.System.ComponentModel.Browsable(False), _
   Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)> _
  Public ReadOnly Property JurnalH() As JurnalHDataTable
    Get
      Return Me.tableJurnalH
    End Get
  End Property

  <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
   Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
   Global.System.ComponentModel.Browsable(False), _
   Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)> _
  Public ReadOnly Property TemplateTransaksi() As TemplateTransaksiDataTable
    Get
      Return Me.tableTemplateTransaksi
    End Get
  End Property

  <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
   Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
   Global.System.ComponentModel.Browsable(False), _
   Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)> _
  Public ReadOnly Property GroupAkun() As GroupAkunDataTable
    Get
      Return Me.tableGroupAkun
    End Get
  End Property

  <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
   Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
   Global.System.ComponentModel.BrowsableAttribute(True), _
   Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)> _
  Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
    Get
      Return Me._schemaSerializationMode
    End Get
    Set(value As Global.System.Data.SchemaSerializationMode)
      Me._schemaSerializationMode = value
    End Set
  End Property

  <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
   Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
   Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)> _
  Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
    Get
      Return MyBase.Tables
    End Get
  End Property

  <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
   Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
   Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)> _
  Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
    Get
      Return MyBase.Relations
    End Get
  End Property

  <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
   Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
  Protected Overrides Sub InitializeDerivedDataSet()
    Me.BeginInit()
    Me.InitClass()
    Me.EndInit()
  End Sub

  <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
   Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
  Public Overrides Function Clone() As Global.System.Data.DataSet
    Dim cln As DataSetAccounting = CType(MyBase.Clone, DataSetAccounting)
    cln.InitVars()
    cln.SchemaSerializationMode = Me.SchemaSerializationMode
    Return cln
  End Function

  <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
   Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
  Protected Overrides Function ShouldSerializeTables() As Boolean
    Return False
  End Function

  <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
   Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
  Protected Overrides Function ShouldSerializeRelations() As Boolean
    Return False
  End Function

  <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
   Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
  Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
    If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
      Me.Reset()
      Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet()
      ds.ReadXml(reader)
      If (Not (ds.Tables("COA")) Is Nothing) Then
        MyBase.Tables.Add(New COADataTable(ds.Tables("COA")))
      End If
      If (Not (ds.Tables("GroupTemplateTransaksi")) Is Nothing) Then
        MyBase.Tables.Add(New GroupTemplateTransaksiDataTable(ds.Tables("GroupTemplateTransaksi")))
      End If
      If (Not (ds.Tables("JurnalD")) Is Nothing) Then
        MyBase.Tables.Add(New JurnalDDataTable(ds.Tables("JurnalD")))
      End If
      If (Not (ds.Tables("JurnalH")) Is Nothing) Then
        MyBase.Tables.Add(New JurnalHDataTable(ds.Tables("JurnalH")))
      End If
      If (Not (ds.Tables("TemplateTransaksi")) Is Nothing) Then
        MyBase.Tables.Add(New TemplateTransaksiDataTable(ds.Tables("TemplateTransaksi")))
      End If
      If (Not (ds.Tables("GroupAkun")) Is Nothing) Then
        MyBase.Tables.Add(New GroupAkunDataTable(ds.Tables("GroupAkun")))
      End If
      Me.DataSetName = ds.DataSetName
      Me.Prefix = ds.Prefix
      Me.Namespace = ds.Namespace
      Me.Locale = ds.Locale
      Me.CaseSensitive = ds.CaseSensitive
      Me.EnforceConstraints = ds.EnforceConstraints
      Me.Merge(ds, False, Global.System.Data.MissingSchemaAction.Add)
      Me.InitVars()
    Else
      Me.ReadXml(reader)
      Me.InitVars()
    End If
  End Sub

  <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
   Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
  Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
    Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
    Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
    stream.Position = 0
    Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
  End Function

  <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
   Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
  Friend Overloads Sub InitVars()
    Me.InitVars(True)
  End Sub

  <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
   Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
  Friend Overloads Sub InitVars(ByVal initTable As Boolean)
    Me.tableCOA = CType(MyBase.Tables("COA"), COADataTable)
    If (initTable = True) Then
      If (Not (Me.tableCOA) Is Nothing) Then
        Me.tableCOA.InitVars()
      End If
    End If
    Me.tableGroupTemplateTransaksi = CType(MyBase.Tables("GroupTemplateTransaksi"), GroupTemplateTransaksiDataTable)
    If (initTable = True) Then
      If (Not (Me.tableGroupTemplateTransaksi) Is Nothing) Then
        Me.tableGroupTemplateTransaksi.InitVars()
      End If
    End If
    Me.tableJurnalD = CType(MyBase.Tables("JurnalD"), JurnalDDataTable)
    If (initTable = True) Then
      If (Not (Me.tableJurnalD) Is Nothing) Then
        Me.tableJurnalD.InitVars()
      End If
    End If
    Me.tableJurnalH = CType(MyBase.Tables("JurnalH"), JurnalHDataTable)
    If (initTable = True) Then
      If (Not (Me.tableJurnalH) Is Nothing) Then
        Me.tableJurnalH.InitVars()
      End If
    End If
    Me.tableTemplateTransaksi = CType(MyBase.Tables("TemplateTransaksi"), TemplateTransaksiDataTable)
    If (initTable = True) Then
      If (Not (Me.tableTemplateTransaksi) Is Nothing) Then
        Me.tableTemplateTransaksi.InitVars()
      End If
    End If
    Me.tableGroupAkun = CType(MyBase.Tables("GroupAkun"), GroupAkunDataTable)
    If (initTable = True) Then
      If (Not (Me.tableGroupAkun) Is Nothing) Then
        Me.tableGroupAkun.InitVars()
      End If
    End If
  End Sub

  <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
   Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
  Private Sub InitClass()
    Me.DataSetName = "DataSetAccounting"
    Me.Prefix = ""
    Me.Namespace = "http://tempuri.org/DataSetAccounting.xsd"
    Me.EnforceConstraints = True
    Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    Me.tableCOA = New COADataTable()
    MyBase.Tables.Add(Me.tableCOA)
    Me.tableGroupTemplateTransaksi = New GroupTemplateTransaksiDataTable()
    MyBase.Tables.Add(Me.tableGroupTemplateTransaksi)
    Me.tableJurnalD = New JurnalDDataTable()
    MyBase.Tables.Add(Me.tableJurnalD)
    Me.tableJurnalH = New JurnalHDataTable()
    MyBase.Tables.Add(Me.tableJurnalH)
    Me.tableTemplateTransaksi = New TemplateTransaksiDataTable()
    MyBase.Tables.Add(Me.tableTemplateTransaksi)
    Me.tableGroupAkun = New GroupAkunDataTable()
    MyBase.Tables.Add(Me.tableGroupAkun)
  End Sub

  <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
   Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
  Private Function ShouldSerializeCOA() As Boolean
    Return False
  End Function

  <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
   Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
  Private Function ShouldSerializeGroupTemplateTransaksi() As Boolean
    Return False
  End Function

  <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
   Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
  Private Function ShouldSerializeJurnalD() As Boolean
    Return False
  End Function

  <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
   Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
  Private Function ShouldSerializeJurnalH() As Boolean
    Return False
  End Function

  <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
   Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
  Private Function ShouldSerializeTemplateTransaksi() As Boolean
    Return False
  End Function

  <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
   Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
  Private Function ShouldSerializeGroupAkun() As Boolean
    Return False
  End Function

  <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
   Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
  Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
    If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
      Me.InitVars()
    End If
  End Sub

  <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
   Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
  Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
    Dim ds As DataSetAccounting = New DataSetAccounting()
    Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
    Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
    Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
    any.Namespace = ds.Namespace
    sequence.Items.Add(any)
    type.Particle = sequence
    Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
    If xs.Contains(dsSchema.TargetNamespace) Then
      Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
      Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
      Try
        Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
        dsSchema.Write(s1)
        Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
        Do While schemas.MoveNext
          schema = CType(schemas.Current, Global.System.Xml.Schema.XmlSchema)
          s2.SetLength(0)
          schema.Write(s2)
          If (s1.Length = s2.Length) Then
            s1.Position = 0
            s2.Position = 0

            Do While ((s1.Position <> s1.Length) _
                        AndAlso (s1.ReadByte = s2.ReadByte))


            Loop
            If (s1.Position = s1.Length) Then
              Return type
            End If
          End If

        Loop
      Finally
        If (Not (s1) Is Nothing) Then
          s1.Close()
        End If
        If (Not (s2) Is Nothing) Then
          s2.Close()
        End If
      End Try
    End If
    xs.Add(dsSchema)
    Return type
  End Function

  <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
  Public Delegate Sub COARowChangeEventHandler(ByVal sender As Object, ByVal e As COARowChangeEvent)

  <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
  Public Delegate Sub GroupTemplateTransaksiRowChangeEventHandler(ByVal sender As Object, ByVal e As GroupTemplateTransaksiRowChangeEvent)

  <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
  Public Delegate Sub JurnalDRowChangeEventHandler(ByVal sender As Object, ByVal e As JurnalDRowChangeEvent)

  <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
  Public Delegate Sub JurnalHRowChangeEventHandler(ByVal sender As Object, ByVal e As JurnalHRowChangeEvent)

  <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
  Public Delegate Sub TemplateTransaksiRowChangeEventHandler(ByVal sender As Object, ByVal e As TemplateTransaksiRowChangeEvent)

  <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
  Public Delegate Sub GroupAkunRowChangeEventHandler(ByVal sender As Object, ByVal e As GroupAkunRowChangeEvent)

  '''<summary>
  '''Represents the strongly named DataTable class.
  '''</summary>
  <Global.System.Serializable(), _
   Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")> _
  Partial Public Class COADataTable
    Inherits Global.System.Data.TypedTableBase(Of COARow)

    Private columnIDAkun As Global.System.Data.DataColumn

    Private columnIDGroupAkun As Global.System.Data.DataColumn

    Private columnIDAkunInduk As Global.System.Data.DataColumn

    Private columnNoAkun As Global.System.Data.DataColumn

    Private columnNama As Global.System.Data.DataColumn

    Private columnPosisi As Global.System.Data.DataColumn

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public Sub New()
      MyBase.New()
      Me.TableName = "COA"
      Me.BeginInit()
      Me.InitClass()
      Me.EndInit()
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Friend Sub New(ByVal table As Global.System.Data.DataTable)
      MyBase.New()
      Me.TableName = table.TableName
      If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
        Me.CaseSensitive = table.CaseSensitive
      End If
      If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
        Me.Locale = table.Locale
      End If
      If (table.Namespace <> table.DataSet.Namespace) Then
        Me.Namespace = table.Namespace
      End If
      Me.Prefix = table.Prefix
      Me.MinimumCapacity = table.MinimumCapacity
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
      MyBase.New(info, context)
      Me.InitVars()
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public ReadOnly Property IDAkunColumn() As Global.System.Data.DataColumn
      Get
        Return Me.columnIDAkun
      End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public ReadOnly Property IDGroupAkunColumn() As Global.System.Data.DataColumn
      Get
        Return Me.columnIDGroupAkun
      End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public ReadOnly Property IDAkunIndukColumn() As Global.System.Data.DataColumn
      Get
        Return Me.columnIDAkunInduk
      End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public ReadOnly Property NoAkunColumn() As Global.System.Data.DataColumn
      Get
        Return Me.columnNoAkun
      End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public ReadOnly Property NamaColumn() As Global.System.Data.DataColumn
      Get
        Return Me.columnNama
      End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public ReadOnly Property PosisiColumn() As Global.System.Data.DataColumn
      Get
        Return Me.columnPosisi
      End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
     Global.System.ComponentModel.Browsable(False)> _
    Public ReadOnly Property Count() As Integer
      Get
        Return Me.Rows.Count
      End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Default Public ReadOnly Property Item(ByVal index As Integer) As COARow
      Get
        Return CType(Me.Rows(index), COARow)
      End Get
    End Property

    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public Event COARowChanging As COARowChangeEventHandler

    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public Event COARowChanged As COARowChangeEventHandler

    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public Event COARowDeleting As COARowChangeEventHandler

    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public Event COARowDeleted As COARowChangeEventHandler

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public Overloads Sub AddCOARow(ByVal row As COARow)
      Me.Rows.Add(row)
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public Overloads Function AddCOARow(ByVal IDAkun As Integer, ByVal IDGroupAkun As Integer, ByVal IDAkunInduk As Integer, ByVal NoAkun As String, ByVal Nama As String, ByVal Posisi As String) As COARow
      Dim rowCOARow As COARow = CType(Me.NewRow, COARow)
      Dim columnValuesArray() As Object = New Object() {IDAkun, IDGroupAkun, IDAkunInduk, NoAkun, Nama, Posisi}
      rowCOARow.ItemArray = columnValuesArray
      Me.Rows.Add(rowCOARow)
      Return rowCOARow
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public Function FindByIDAkun(ByVal IDAkun As Integer) As COARow
      Return CType(Me.Rows.Find(New Object() {IDAkun}), COARow)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public Overrides Function Clone() As Global.System.Data.DataTable
      Dim cln As COADataTable = CType(MyBase.Clone, COADataTable)
      cln.InitVars()
      Return cln
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
      Return New COADataTable()
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Friend Sub InitVars()
      Me.columnIDAkun = MyBase.Columns("IDAkun")
      Me.columnIDGroupAkun = MyBase.Columns("IDGroupAkun")
      Me.columnIDAkunInduk = MyBase.Columns("IDAkunInduk")
      Me.columnNoAkun = MyBase.Columns("NoAkun")
      Me.columnNama = MyBase.Columns("Nama")
      Me.columnPosisi = MyBase.Columns("Posisi")
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Private Sub InitClass()
      Me.columnIDAkun = New Global.System.Data.DataColumn("IDAkun", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
      MyBase.Columns.Add(Me.columnIDAkun)
      Me.columnIDGroupAkun = New Global.System.Data.DataColumn("IDGroupAkun", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
      MyBase.Columns.Add(Me.columnIDGroupAkun)
      Me.columnIDAkunInduk = New Global.System.Data.DataColumn("IDAkunInduk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
      MyBase.Columns.Add(Me.columnIDAkunInduk)
      Me.columnNoAkun = New Global.System.Data.DataColumn("NoAkun", GetType(String), Nothing, Global.System.Data.MappingType.Element)
      MyBase.Columns.Add(Me.columnNoAkun)
      Me.columnNama = New Global.System.Data.DataColumn("Nama", GetType(String), Nothing, Global.System.Data.MappingType.Element)
      MyBase.Columns.Add(Me.columnNama)
      Me.columnPosisi = New Global.System.Data.DataColumn("Posisi", GetType(String), Nothing, Global.System.Data.MappingType.Element)
      MyBase.Columns.Add(Me.columnPosisi)
      Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnIDAkun}, True))
      Me.columnIDAkun.AllowDBNull = False
      Me.columnIDAkun.Unique = True
      Me.columnIDGroupAkun.AllowDBNull = False
      Me.columnIDAkunInduk.AllowDBNull = False
      Me.columnNoAkun.AllowDBNull = False
      Me.columnNoAkun.MaxLength = 10
      Me.columnNama.AllowDBNull = False
      Me.columnNama.MaxLength = 80
      Me.columnPosisi.AllowDBNull = False
      Me.columnPosisi.MaxLength = 1
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public Function NewCOARow() As COARow
      Return CType(Me.NewRow, COARow)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
      Return New COARow(builder)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Protected Overrides Function GetRowType() As Global.System.Type
      Return GetType(COARow)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
      MyBase.OnRowChanged(e)
      If (Not (Me.COARowChangedEvent) Is Nothing) Then
        RaiseEvent COARowChanged(Me, New COARowChangeEvent(CType(e.Row, COARow), e.Action))
      End If
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
      MyBase.OnRowChanging(e)
      If (Not (Me.COARowChangingEvent) Is Nothing) Then
        RaiseEvent COARowChanging(Me, New COARowChangeEvent(CType(e.Row, COARow), e.Action))
      End If
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
      MyBase.OnRowDeleted(e)
      If (Not (Me.COARowDeletedEvent) Is Nothing) Then
        RaiseEvent COARowDeleted(Me, New COARowChangeEvent(CType(e.Row, COARow), e.Action))
      End If
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
      MyBase.OnRowDeleting(e)
      If (Not (Me.COARowDeletingEvent) Is Nothing) Then
        RaiseEvent COARowDeleting(Me, New COARowChangeEvent(CType(e.Row, COARow), e.Action))
      End If
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public Sub RemoveCOARow(ByVal row As COARow)
      Me.Rows.Remove(row)
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
      Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
      Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
      Dim ds As DataSetAccounting = New DataSetAccounting()
      Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
      any1.Namespace = "http://www.w3.org/2001/XMLSchema"
      any1.MinOccurs = New Decimal(0)
      any1.MaxOccurs = Decimal.MaxValue
      any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
      sequence.Items.Add(any1)
      Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
      any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
      any2.MinOccurs = New Decimal(1)
      any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
      sequence.Items.Add(any2)
      Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
      attribute1.Name = "namespace"
      attribute1.FixedValue = ds.Namespace
      type.Attributes.Add(attribute1)
      Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
      attribute2.Name = "tableTypeName"
      attribute2.FixedValue = "COADataTable"
      type.Attributes.Add(attribute2)
      type.Particle = sequence
      Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
      If xs.Contains(dsSchema.TargetNamespace) Then
        Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
        Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
        Try
          Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
          dsSchema.Write(s1)
          Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
          Do While schemas.MoveNext
            schema = CType(schemas.Current, Global.System.Xml.Schema.XmlSchema)
            s2.SetLength(0)
            schema.Write(s2)
            If (s1.Length = s2.Length) Then
              s1.Position = 0
              s2.Position = 0

              Do While ((s1.Position <> s1.Length) _
                          AndAlso (s1.ReadByte = s2.ReadByte))


              Loop
              If (s1.Position = s1.Length) Then
                Return type
              End If
            End If

          Loop
        Finally
          If (Not (s1) Is Nothing) Then
            s1.Close()
          End If
          If (Not (s2) Is Nothing) Then
            s2.Close()
          End If
        End Try
      End If
      xs.Add(dsSchema)
      Return type
    End Function
  End Class

  '''<summary>
  '''Represents the strongly named DataTable class.
  '''</summary>
  <Global.System.Serializable(), _
   Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")> _
  Partial Public Class GroupTemplateTransaksiDataTable
    Inherits Global.System.Data.TypedTableBase(Of GroupTemplateTransaksiRow)

    Private columnIDGroupTemplate As Global.System.Data.DataColumn

    Private columnNama As Global.System.Data.DataColumn

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public Sub New()
      MyBase.New()
      Me.TableName = "GroupTemplateTransaksi"
      Me.BeginInit()
      Me.InitClass()
      Me.EndInit()
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Friend Sub New(ByVal table As Global.System.Data.DataTable)
      MyBase.New()
      Me.TableName = table.TableName
      If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
        Me.CaseSensitive = table.CaseSensitive
      End If
      If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
        Me.Locale = table.Locale
      End If
      If (table.Namespace <> table.DataSet.Namespace) Then
        Me.Namespace = table.Namespace
      End If
      Me.Prefix = table.Prefix
      Me.MinimumCapacity = table.MinimumCapacity
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
      MyBase.New(info, context)
      Me.InitVars()
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public ReadOnly Property IDGroupTemplateColumn() As Global.System.Data.DataColumn
      Get
        Return Me.columnIDGroupTemplate
      End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public ReadOnly Property NamaColumn() As Global.System.Data.DataColumn
      Get
        Return Me.columnNama
      End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
     Global.System.ComponentModel.Browsable(False)> _
    Public ReadOnly Property Count() As Integer
      Get
        Return Me.Rows.Count
      End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Default Public ReadOnly Property Item(ByVal index As Integer) As GroupTemplateTransaksiRow
      Get
        Return CType(Me.Rows(index), GroupTemplateTransaksiRow)
      End Get
    End Property

    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public Event GroupTemplateTransaksiRowChanging As GroupTemplateTransaksiRowChangeEventHandler

    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public Event GroupTemplateTransaksiRowChanged As GroupTemplateTransaksiRowChangeEventHandler

    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public Event GroupTemplateTransaksiRowDeleting As GroupTemplateTransaksiRowChangeEventHandler

    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public Event GroupTemplateTransaksiRowDeleted As GroupTemplateTransaksiRowChangeEventHandler

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public Overloads Sub AddGroupTemplateTransaksiRow(ByVal row As GroupTemplateTransaksiRow)
      Me.Rows.Add(row)
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public Overloads Function AddGroupTemplateTransaksiRow(ByVal IDGroupTemplate As Integer, ByVal Nama As String) As GroupTemplateTransaksiRow
      Dim rowGroupTemplateTransaksiRow As GroupTemplateTransaksiRow = CType(Me.NewRow, GroupTemplateTransaksiRow)
      Dim columnValuesArray() As Object = New Object() {IDGroupTemplate, Nama}
      rowGroupTemplateTransaksiRow.ItemArray = columnValuesArray
      Me.Rows.Add(rowGroupTemplateTransaksiRow)
      Return rowGroupTemplateTransaksiRow
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public Function FindByIDGroupTemplate(ByVal IDGroupTemplate As Integer) As GroupTemplateTransaksiRow
      Return CType(Me.Rows.Find(New Object() {IDGroupTemplate}), GroupTemplateTransaksiRow)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public Overrides Function Clone() As Global.System.Data.DataTable
      Dim cln As GroupTemplateTransaksiDataTable = CType(MyBase.Clone, GroupTemplateTransaksiDataTable)
      cln.InitVars()
      Return cln
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
      Return New GroupTemplateTransaksiDataTable()
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Friend Sub InitVars()
      Me.columnIDGroupTemplate = MyBase.Columns("IDGroupTemplate")
      Me.columnNama = MyBase.Columns("Nama")
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Private Sub InitClass()
      Me.columnIDGroupTemplate = New Global.System.Data.DataColumn("IDGroupTemplate", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
      MyBase.Columns.Add(Me.columnIDGroupTemplate)
      Me.columnNama = New Global.System.Data.DataColumn("Nama", GetType(String), Nothing, Global.System.Data.MappingType.Element)
      MyBase.Columns.Add(Me.columnNama)
      Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnIDGroupTemplate}, True))
      Me.columnIDGroupTemplate.AllowDBNull = False
      Me.columnIDGroupTemplate.Unique = True
      Me.columnNama.MaxLength = 50
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public Function NewGroupTemplateTransaksiRow() As GroupTemplateTransaksiRow
      Return CType(Me.NewRow, GroupTemplateTransaksiRow)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
      Return New GroupTemplateTransaksiRow(builder)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Protected Overrides Function GetRowType() As Global.System.Type
      Return GetType(GroupTemplateTransaksiRow)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
      MyBase.OnRowChanged(e)
      If (Not (Me.GroupTemplateTransaksiRowChangedEvent) Is Nothing) Then
        RaiseEvent GroupTemplateTransaksiRowChanged(Me, New GroupTemplateTransaksiRowChangeEvent(CType(e.Row, GroupTemplateTransaksiRow), e.Action))
      End If
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
      MyBase.OnRowChanging(e)
      If (Not (Me.GroupTemplateTransaksiRowChangingEvent) Is Nothing) Then
        RaiseEvent GroupTemplateTransaksiRowChanging(Me, New GroupTemplateTransaksiRowChangeEvent(CType(e.Row, GroupTemplateTransaksiRow), e.Action))
      End If
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
      MyBase.OnRowDeleted(e)
      If (Not (Me.GroupTemplateTransaksiRowDeletedEvent) Is Nothing) Then
        RaiseEvent GroupTemplateTransaksiRowDeleted(Me, New GroupTemplateTransaksiRowChangeEvent(CType(e.Row, GroupTemplateTransaksiRow), e.Action))
      End If
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
      MyBase.OnRowDeleting(e)
      If (Not (Me.GroupTemplateTransaksiRowDeletingEvent) Is Nothing) Then
        RaiseEvent GroupTemplateTransaksiRowDeleting(Me, New GroupTemplateTransaksiRowChangeEvent(CType(e.Row, GroupTemplateTransaksiRow), e.Action))
      End If
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public Sub RemoveGroupTemplateTransaksiRow(ByVal row As GroupTemplateTransaksiRow)
      Me.Rows.Remove(row)
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
      Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
      Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
      Dim ds As DataSetAccounting = New DataSetAccounting()
      Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
      any1.Namespace = "http://www.w3.org/2001/XMLSchema"
      any1.MinOccurs = New Decimal(0)
      any1.MaxOccurs = Decimal.MaxValue
      any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
      sequence.Items.Add(any1)
      Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
      any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
      any2.MinOccurs = New Decimal(1)
      any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
      sequence.Items.Add(any2)
      Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
      attribute1.Name = "namespace"
      attribute1.FixedValue = ds.Namespace
      type.Attributes.Add(attribute1)
      Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
      attribute2.Name = "tableTypeName"
      attribute2.FixedValue = "GroupTemplateTransaksiDataTable"
      type.Attributes.Add(attribute2)
      type.Particle = sequence
      Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
      If xs.Contains(dsSchema.TargetNamespace) Then
        Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
        Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
        Try
          Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
          dsSchema.Write(s1)
          Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
          Do While schemas.MoveNext
            schema = CType(schemas.Current, Global.System.Xml.Schema.XmlSchema)
            s2.SetLength(0)
            schema.Write(s2)
            If (s1.Length = s2.Length) Then
              s1.Position = 0
              s2.Position = 0

              Do While ((s1.Position <> s1.Length) _
                          AndAlso (s1.ReadByte = s2.ReadByte))


              Loop
              If (s1.Position = s1.Length) Then
                Return type
              End If
            End If

          Loop
        Finally
          If (Not (s1) Is Nothing) Then
            s1.Close()
          End If
          If (Not (s2) Is Nothing) Then
            s2.Close()
          End If
        End Try
      End If
      xs.Add(dsSchema)
      Return type
    End Function
  End Class

  '''<summary>
  '''Represents the strongly named DataTable class.
  '''</summary>
  <Global.System.Serializable(), _
   Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")> _
  Partial Public Class JurnalDDataTable
    Inherits Global.System.Data.TypedTableBase(Of JurnalDRow)

    Private columnIDJurnalH As Global.System.Data.DataColumn

    Private columnIDJurnalD As Global.System.Data.DataColumn

    Private columnIDAkun As Global.System.Data.DataColumn

    Private columnJumlah As Global.System.Data.DataColumn

    Private columnPosisi As Global.System.Data.DataColumn

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public Sub New()
      MyBase.New()
      Me.TableName = "JurnalD"
      Me.BeginInit()
      Me.InitClass()
      Me.EndInit()
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Friend Sub New(ByVal table As Global.System.Data.DataTable)
      MyBase.New()
      Me.TableName = table.TableName
      If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
        Me.CaseSensitive = table.CaseSensitive
      End If
      If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
        Me.Locale = table.Locale
      End If
      If (table.Namespace <> table.DataSet.Namespace) Then
        Me.Namespace = table.Namespace
      End If
      Me.Prefix = table.Prefix
      Me.MinimumCapacity = table.MinimumCapacity
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
      MyBase.New(info, context)
      Me.InitVars()
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public ReadOnly Property IDJurnalHColumn() As Global.System.Data.DataColumn
      Get
        Return Me.columnIDJurnalH
      End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public ReadOnly Property IDJurnalDColumn() As Global.System.Data.DataColumn
      Get
        Return Me.columnIDJurnalD
      End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public ReadOnly Property IDAkunColumn() As Global.System.Data.DataColumn
      Get
        Return Me.columnIDAkun
      End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public ReadOnly Property JumlahColumn() As Global.System.Data.DataColumn
      Get
        Return Me.columnJumlah
      End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public ReadOnly Property PosisiColumn() As Global.System.Data.DataColumn
      Get
        Return Me.columnPosisi
      End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
     Global.System.ComponentModel.Browsable(False)> _
    Public ReadOnly Property Count() As Integer
      Get
        Return Me.Rows.Count
      End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Default Public ReadOnly Property Item(ByVal index As Integer) As JurnalDRow
      Get
        Return CType(Me.Rows(index), JurnalDRow)
      End Get
    End Property

    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public Event JurnalDRowChanging As JurnalDRowChangeEventHandler

    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public Event JurnalDRowChanged As JurnalDRowChangeEventHandler

    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public Event JurnalDRowDeleting As JurnalDRowChangeEventHandler

    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public Event JurnalDRowDeleted As JurnalDRowChangeEventHandler

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public Overloads Sub AddJurnalDRow(ByVal row As JurnalDRow)
      Me.Rows.Add(row)
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public Overloads Function AddJurnalDRow(ByVal IDJurnalH As Long, ByVal IDJurnalD As Long, ByVal IDAkun As Integer, ByVal Jumlah As Decimal, ByVal Posisi As String) As JurnalDRow
      Dim rowJurnalDRow As JurnalDRow = CType(Me.NewRow, JurnalDRow)
      Dim columnValuesArray() As Object = New Object() {IDJurnalH, IDJurnalD, IDAkun, Jumlah, Posisi}
      rowJurnalDRow.ItemArray = columnValuesArray
      Me.Rows.Add(rowJurnalDRow)
      Return rowJurnalDRow
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public Function FindByIDJurnalD(ByVal IDJurnalD As Long) As JurnalDRow
      Return CType(Me.Rows.Find(New Object() {IDJurnalD}), JurnalDRow)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public Overrides Function Clone() As Global.System.Data.DataTable
      Dim cln As JurnalDDataTable = CType(MyBase.Clone, JurnalDDataTable)
      cln.InitVars()
      Return cln
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
      Return New JurnalDDataTable()
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Friend Sub InitVars()
      Me.columnIDJurnalH = MyBase.Columns("IDJurnalH")
      Me.columnIDJurnalD = MyBase.Columns("IDJurnalD")
      Me.columnIDAkun = MyBase.Columns("IDAkun")
      Me.columnJumlah = MyBase.Columns("Jumlah")
      Me.columnPosisi = MyBase.Columns("Posisi")
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Private Sub InitClass()
      Me.columnIDJurnalH = New Global.System.Data.DataColumn("IDJurnalH", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
      MyBase.Columns.Add(Me.columnIDJurnalH)
      Me.columnIDJurnalD = New Global.System.Data.DataColumn("IDJurnalD", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
      MyBase.Columns.Add(Me.columnIDJurnalD)
      Me.columnIDAkun = New Global.System.Data.DataColumn("IDAkun", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
      MyBase.Columns.Add(Me.columnIDAkun)
      Me.columnJumlah = New Global.System.Data.DataColumn("Jumlah", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
      MyBase.Columns.Add(Me.columnJumlah)
      Me.columnPosisi = New Global.System.Data.DataColumn("Posisi", GetType(String), Nothing, Global.System.Data.MappingType.Element)
      MyBase.Columns.Add(Me.columnPosisi)
      Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnIDJurnalD}, True))
      Me.columnIDJurnalH.AllowDBNull = False
      Me.columnIDJurnalD.AllowDBNull = False
      Me.columnIDJurnalD.Unique = True
      Me.columnIDAkun.AllowDBNull = False
      Me.columnJumlah.AllowDBNull = False
      Me.columnPosisi.MaxLength = 1
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public Function NewJurnalDRow() As JurnalDRow
      Return CType(Me.NewRow, JurnalDRow)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
      Return New JurnalDRow(builder)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Protected Overrides Function GetRowType() As Global.System.Type
      Return GetType(JurnalDRow)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
      MyBase.OnRowChanged(e)
      If (Not (Me.JurnalDRowChangedEvent) Is Nothing) Then
        RaiseEvent JurnalDRowChanged(Me, New JurnalDRowChangeEvent(CType(e.Row, JurnalDRow), e.Action))
      End If
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
      MyBase.OnRowChanging(e)
      If (Not (Me.JurnalDRowChangingEvent) Is Nothing) Then
        RaiseEvent JurnalDRowChanging(Me, New JurnalDRowChangeEvent(CType(e.Row, JurnalDRow), e.Action))
      End If
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
      MyBase.OnRowDeleted(e)
      If (Not (Me.JurnalDRowDeletedEvent) Is Nothing) Then
        RaiseEvent JurnalDRowDeleted(Me, New JurnalDRowChangeEvent(CType(e.Row, JurnalDRow), e.Action))
      End If
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
      MyBase.OnRowDeleting(e)
      If (Not (Me.JurnalDRowDeletingEvent) Is Nothing) Then
        RaiseEvent JurnalDRowDeleting(Me, New JurnalDRowChangeEvent(CType(e.Row, JurnalDRow), e.Action))
      End If
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public Sub RemoveJurnalDRow(ByVal row As JurnalDRow)
      Me.Rows.Remove(row)
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
      Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
      Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
      Dim ds As DataSetAccounting = New DataSetAccounting()
      Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
      any1.Namespace = "http://www.w3.org/2001/XMLSchema"
      any1.MinOccurs = New Decimal(0)
      any1.MaxOccurs = Decimal.MaxValue
      any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
      sequence.Items.Add(any1)
      Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
      any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
      any2.MinOccurs = New Decimal(1)
      any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
      sequence.Items.Add(any2)
      Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
      attribute1.Name = "namespace"
      attribute1.FixedValue = ds.Namespace
      type.Attributes.Add(attribute1)
      Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
      attribute2.Name = "tableTypeName"
      attribute2.FixedValue = "JurnalDDataTable"
      type.Attributes.Add(attribute2)
      type.Particle = sequence
      Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
      If xs.Contains(dsSchema.TargetNamespace) Then
        Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
        Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
        Try
          Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
          dsSchema.Write(s1)
          Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
          Do While schemas.MoveNext
            schema = CType(schemas.Current, Global.System.Xml.Schema.XmlSchema)
            s2.SetLength(0)
            schema.Write(s2)
            If (s1.Length = s2.Length) Then
              s1.Position = 0
              s2.Position = 0

              Do While ((s1.Position <> s1.Length) _
                          AndAlso (s1.ReadByte = s2.ReadByte))


              Loop
              If (s1.Position = s1.Length) Then
                Return type
              End If
            End If

          Loop
        Finally
          If (Not (s1) Is Nothing) Then
            s1.Close()
          End If
          If (Not (s2) Is Nothing) Then
            s2.Close()
          End If
        End Try
      End If
      xs.Add(dsSchema)
      Return type
    End Function
  End Class

  '''<summary>
  '''Represents the strongly named DataTable class.
  '''</summary>
  <Global.System.Serializable(), _
   Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")> _
  Partial Public Class JurnalHDataTable
    Inherits Global.System.Data.TypedTableBase(Of JurnalHRow)

    Private columnIDJurnalH As Global.System.Data.DataColumn

    Private columnTanggal As Global.System.Data.DataColumn

    Private columnSumber As Global.System.Data.DataColumn

    Private columnIDTransaksi As Global.System.Data.DataColumn

    Private columnKeterangan As Global.System.Data.DataColumn

    Private columnStatusAktif As Global.System.Data.DataColumn

    Private columnIsCredited As Global.System.Data.DataColumn

    Private columnIDJurnalKredit As Global.System.Data.DataColumn

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public Sub New()
      MyBase.New()
      Me.TableName = "JurnalH"
      Me.BeginInit()
      Me.InitClass()
      Me.EndInit()
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Friend Sub New(ByVal table As Global.System.Data.DataTable)
      MyBase.New()
      Me.TableName = table.TableName
      If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
        Me.CaseSensitive = table.CaseSensitive
      End If
      If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
        Me.Locale = table.Locale
      End If
      If (table.Namespace <> table.DataSet.Namespace) Then
        Me.Namespace = table.Namespace
      End If
      Me.Prefix = table.Prefix
      Me.MinimumCapacity = table.MinimumCapacity
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
      MyBase.New(info, context)
      Me.InitVars()
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public ReadOnly Property IDJurnalHColumn() As Global.System.Data.DataColumn
      Get
        Return Me.columnIDJurnalH
      End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public ReadOnly Property TanggalColumn() As Global.System.Data.DataColumn
      Get
        Return Me.columnTanggal
      End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public ReadOnly Property SumberColumn() As Global.System.Data.DataColumn
      Get
        Return Me.columnSumber
      End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public ReadOnly Property IDTransaksiColumn() As Global.System.Data.DataColumn
      Get
        Return Me.columnIDTransaksi
      End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public ReadOnly Property KeteranganColumn() As Global.System.Data.DataColumn
      Get
        Return Me.columnKeterangan
      End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public ReadOnly Property StatusAktifColumn() As Global.System.Data.DataColumn
      Get
        Return Me.columnStatusAktif
      End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public ReadOnly Property IsCreditedColumn() As Global.System.Data.DataColumn
      Get
        Return Me.columnIsCredited
      End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public ReadOnly Property IDJurnalKreditColumn() As Global.System.Data.DataColumn
      Get
        Return Me.columnIDJurnalKredit
      End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
     Global.System.ComponentModel.Browsable(False)> _
    Public ReadOnly Property Count() As Integer
      Get
        Return Me.Rows.Count
      End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Default Public ReadOnly Property Item(ByVal index As Integer) As JurnalHRow
      Get
        Return CType(Me.Rows(index), JurnalHRow)
      End Get
    End Property

    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public Event JurnalHRowChanging As JurnalHRowChangeEventHandler

    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public Event JurnalHRowChanged As JurnalHRowChangeEventHandler

    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public Event JurnalHRowDeleting As JurnalHRowChangeEventHandler

    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public Event JurnalHRowDeleted As JurnalHRowChangeEventHandler

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public Overloads Sub AddJurnalHRow(ByVal row As JurnalHRow)
      Me.Rows.Add(row)
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public Overloads Function AddJurnalHRow(ByVal IDJurnalH As Long, ByVal Tanggal As Date, ByVal Sumber As String, ByVal IDTransaksi As Long, ByVal Keterangan As String, ByVal StatusAktif As Boolean, ByVal IsCredited As Boolean, ByVal IDJurnalKredit As Long) As JurnalHRow
      Dim rowJurnalHRow As JurnalHRow = CType(Me.NewRow, JurnalHRow)
      Dim columnValuesArray() As Object = New Object() {IDJurnalH, Tanggal, Sumber, IDTransaksi, Keterangan, StatusAktif, IsCredited, IDJurnalKredit}
      rowJurnalHRow.ItemArray = columnValuesArray
      Me.Rows.Add(rowJurnalHRow)
      Return rowJurnalHRow
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public Function FindByIDJurnalH(ByVal IDJurnalH As Long) As JurnalHRow
      Return CType(Me.Rows.Find(New Object() {IDJurnalH}), JurnalHRow)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public Overrides Function Clone() As Global.System.Data.DataTable
      Dim cln As JurnalHDataTable = CType(MyBase.Clone, JurnalHDataTable)
      cln.InitVars()
      Return cln
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
      Return New JurnalHDataTable()
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Friend Sub InitVars()
      Me.columnIDJurnalH = MyBase.Columns("IDJurnalH")
      Me.columnTanggal = MyBase.Columns("Tanggal")
      Me.columnSumber = MyBase.Columns("Sumber")
      Me.columnIDTransaksi = MyBase.Columns("IDTransaksi")
      Me.columnKeterangan = MyBase.Columns("Keterangan")
      Me.columnStatusAktif = MyBase.Columns("StatusAktif")
      Me.columnIsCredited = MyBase.Columns("IsCredited")
      Me.columnIDJurnalKredit = MyBase.Columns("IDJurnalKredit")
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Private Sub InitClass()
      Me.columnIDJurnalH = New Global.System.Data.DataColumn("IDJurnalH", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
      MyBase.Columns.Add(Me.columnIDJurnalH)
      Me.columnTanggal = New Global.System.Data.DataColumn("Tanggal", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
      MyBase.Columns.Add(Me.columnTanggal)
      Me.columnSumber = New Global.System.Data.DataColumn("Sumber", GetType(String), Nothing, Global.System.Data.MappingType.Element)
      MyBase.Columns.Add(Me.columnSumber)
      Me.columnIDTransaksi = New Global.System.Data.DataColumn("IDTransaksi", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
      MyBase.Columns.Add(Me.columnIDTransaksi)
      Me.columnKeterangan = New Global.System.Data.DataColumn("Keterangan", GetType(String), Nothing, Global.System.Data.MappingType.Element)
      MyBase.Columns.Add(Me.columnKeterangan)
      Me.columnStatusAktif = New Global.System.Data.DataColumn("StatusAktif", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
      MyBase.Columns.Add(Me.columnStatusAktif)
      Me.columnIsCredited = New Global.System.Data.DataColumn("IsCredited", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
      MyBase.Columns.Add(Me.columnIsCredited)
      Me.columnIDJurnalKredit = New Global.System.Data.DataColumn("IDJurnalKredit", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
      MyBase.Columns.Add(Me.columnIDJurnalKredit)
      Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnIDJurnalH}, True))
      Me.columnIDJurnalH.AllowDBNull = False
      Me.columnIDJurnalH.Unique = True
      Me.columnTanggal.AllowDBNull = False
      Me.columnSumber.AllowDBNull = False
      Me.columnSumber.MaxLength = 50
      Me.columnIDTransaksi.AllowDBNull = False
      Me.columnKeterangan.AllowDBNull = False
      Me.columnKeterangan.MaxLength = 100
      Me.columnStatusAktif.AllowDBNull = False
      Me.columnIsCredited.AllowDBNull = False
      Me.columnIDJurnalKredit.AllowDBNull = False
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public Function NewJurnalHRow() As JurnalHRow
      Return CType(Me.NewRow, JurnalHRow)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
      Return New JurnalHRow(builder)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Protected Overrides Function GetRowType() As Global.System.Type
      Return GetType(JurnalHRow)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
      MyBase.OnRowChanged(e)
      If (Not (Me.JurnalHRowChangedEvent) Is Nothing) Then
        RaiseEvent JurnalHRowChanged(Me, New JurnalHRowChangeEvent(CType(e.Row, JurnalHRow), e.Action))
      End If
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
      MyBase.OnRowChanging(e)
      If (Not (Me.JurnalHRowChangingEvent) Is Nothing) Then
        RaiseEvent JurnalHRowChanging(Me, New JurnalHRowChangeEvent(CType(e.Row, JurnalHRow), e.Action))
      End If
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
      MyBase.OnRowDeleted(e)
      If (Not (Me.JurnalHRowDeletedEvent) Is Nothing) Then
        RaiseEvent JurnalHRowDeleted(Me, New JurnalHRowChangeEvent(CType(e.Row, JurnalHRow), e.Action))
      End If
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
      MyBase.OnRowDeleting(e)
      If (Not (Me.JurnalHRowDeletingEvent) Is Nothing) Then
        RaiseEvent JurnalHRowDeleting(Me, New JurnalHRowChangeEvent(CType(e.Row, JurnalHRow), e.Action))
      End If
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public Sub RemoveJurnalHRow(ByVal row As JurnalHRow)
      Me.Rows.Remove(row)
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
      Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
      Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
      Dim ds As DataSetAccounting = New DataSetAccounting()
      Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
      any1.Namespace = "http://www.w3.org/2001/XMLSchema"
      any1.MinOccurs = New Decimal(0)
      any1.MaxOccurs = Decimal.MaxValue
      any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
      sequence.Items.Add(any1)
      Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
      any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
      any2.MinOccurs = New Decimal(1)
      any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
      sequence.Items.Add(any2)
      Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
      attribute1.Name = "namespace"
      attribute1.FixedValue = ds.Namespace
      type.Attributes.Add(attribute1)
      Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
      attribute2.Name = "tableTypeName"
      attribute2.FixedValue = "JurnalHDataTable"
      type.Attributes.Add(attribute2)
      type.Particle = sequence
      Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
      If xs.Contains(dsSchema.TargetNamespace) Then
        Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
        Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
        Try
          Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
          dsSchema.Write(s1)
          Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
          Do While schemas.MoveNext
            schema = CType(schemas.Current, Global.System.Xml.Schema.XmlSchema)
            s2.SetLength(0)
            schema.Write(s2)
            If (s1.Length = s2.Length) Then
              s1.Position = 0
              s2.Position = 0

              Do While ((s1.Position <> s1.Length) _
                          AndAlso (s1.ReadByte = s2.ReadByte))


              Loop
              If (s1.Position = s1.Length) Then
                Return type
              End If
            End If

          Loop
        Finally
          If (Not (s1) Is Nothing) Then
            s1.Close()
          End If
          If (Not (s2) Is Nothing) Then
            s2.Close()
          End If
        End Try
      End If
      xs.Add(dsSchema)
      Return type
    End Function
  End Class

  '''<summary>
  '''Represents the strongly named DataTable class.
  '''</summary>
  <Global.System.Serializable(), _
   Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")> _
  Partial Public Class TemplateTransaksiDataTable
    Inherits Global.System.Data.TypedTableBase(Of TemplateTransaksiRow)

    Private columnIDGroupTemplate As Global.System.Data.DataColumn

    Private columnIDAkun As Global.System.Data.DataColumn

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public Sub New()
      MyBase.New()
      Me.TableName = "TemplateTransaksi"
      Me.BeginInit()
      Me.InitClass()
      Me.EndInit()
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Friend Sub New(ByVal table As Global.System.Data.DataTable)
      MyBase.New()
      Me.TableName = table.TableName
      If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
        Me.CaseSensitive = table.CaseSensitive
      End If
      If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
        Me.Locale = table.Locale
      End If
      If (table.Namespace <> table.DataSet.Namespace) Then
        Me.Namespace = table.Namespace
      End If
      Me.Prefix = table.Prefix
      Me.MinimumCapacity = table.MinimumCapacity
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
      MyBase.New(info, context)
      Me.InitVars()
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public ReadOnly Property IDGroupTemplateColumn() As Global.System.Data.DataColumn
      Get
        Return Me.columnIDGroupTemplate
      End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public ReadOnly Property IDAkunColumn() As Global.System.Data.DataColumn
      Get
        Return Me.columnIDAkun
      End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
     Global.System.ComponentModel.Browsable(False)> _
    Public ReadOnly Property Count() As Integer
      Get
        Return Me.Rows.Count
      End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Default Public ReadOnly Property Item(ByVal index As Integer) As TemplateTransaksiRow
      Get
        Return CType(Me.Rows(index), TemplateTransaksiRow)
      End Get
    End Property

    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public Event TemplateTransaksiRowChanging As TemplateTransaksiRowChangeEventHandler

    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public Event TemplateTransaksiRowChanged As TemplateTransaksiRowChangeEventHandler

    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public Event TemplateTransaksiRowDeleting As TemplateTransaksiRowChangeEventHandler

    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public Event TemplateTransaksiRowDeleted As TemplateTransaksiRowChangeEventHandler

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public Overloads Sub AddTemplateTransaksiRow(ByVal row As TemplateTransaksiRow)
      Me.Rows.Add(row)
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public Overloads Function AddTemplateTransaksiRow(ByVal IDGroupTemplate As Integer, ByVal IDAkun As Integer) As TemplateTransaksiRow
      Dim rowTemplateTransaksiRow As TemplateTransaksiRow = CType(Me.NewRow, TemplateTransaksiRow)
      Dim columnValuesArray() As Object = New Object() {IDGroupTemplate, IDAkun}
      rowTemplateTransaksiRow.ItemArray = columnValuesArray
      Me.Rows.Add(rowTemplateTransaksiRow)
      Return rowTemplateTransaksiRow
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public Overrides Function Clone() As Global.System.Data.DataTable
      Dim cln As TemplateTransaksiDataTable = CType(MyBase.Clone, TemplateTransaksiDataTable)
      cln.InitVars()
      Return cln
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
      Return New TemplateTransaksiDataTable()
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Friend Sub InitVars()
      Me.columnIDGroupTemplate = MyBase.Columns("IDGroupTemplate")
      Me.columnIDAkun = MyBase.Columns("IDAkun")
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Private Sub InitClass()
      Me.columnIDGroupTemplate = New Global.System.Data.DataColumn("IDGroupTemplate", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
      MyBase.Columns.Add(Me.columnIDGroupTemplate)
      Me.columnIDAkun = New Global.System.Data.DataColumn("IDAkun", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
      MyBase.Columns.Add(Me.columnIDAkun)
      Me.columnIDGroupTemplate.AllowDBNull = False
      Me.columnIDAkun.AllowDBNull = False
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public Function NewTemplateTransaksiRow() As TemplateTransaksiRow
      Return CType(Me.NewRow, TemplateTransaksiRow)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
      Return New TemplateTransaksiRow(builder)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Protected Overrides Function GetRowType() As Global.System.Type
      Return GetType(TemplateTransaksiRow)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
      MyBase.OnRowChanged(e)
      If (Not (Me.TemplateTransaksiRowChangedEvent) Is Nothing) Then
        RaiseEvent TemplateTransaksiRowChanged(Me, New TemplateTransaksiRowChangeEvent(CType(e.Row, TemplateTransaksiRow), e.Action))
      End If
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
      MyBase.OnRowChanging(e)
      If (Not (Me.TemplateTransaksiRowChangingEvent) Is Nothing) Then
        RaiseEvent TemplateTransaksiRowChanging(Me, New TemplateTransaksiRowChangeEvent(CType(e.Row, TemplateTransaksiRow), e.Action))
      End If
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
      MyBase.OnRowDeleted(e)
      If (Not (Me.TemplateTransaksiRowDeletedEvent) Is Nothing) Then
        RaiseEvent TemplateTransaksiRowDeleted(Me, New TemplateTransaksiRowChangeEvent(CType(e.Row, TemplateTransaksiRow), e.Action))
      End If
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
      MyBase.OnRowDeleting(e)
      If (Not (Me.TemplateTransaksiRowDeletingEvent) Is Nothing) Then
        RaiseEvent TemplateTransaksiRowDeleting(Me, New TemplateTransaksiRowChangeEvent(CType(e.Row, TemplateTransaksiRow), e.Action))
      End If
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public Sub RemoveTemplateTransaksiRow(ByVal row As TemplateTransaksiRow)
      Me.Rows.Remove(row)
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
      Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
      Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
      Dim ds As DataSetAccounting = New DataSetAccounting()
      Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
      any1.Namespace = "http://www.w3.org/2001/XMLSchema"
      any1.MinOccurs = New Decimal(0)
      any1.MaxOccurs = Decimal.MaxValue
      any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
      sequence.Items.Add(any1)
      Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
      any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
      any2.MinOccurs = New Decimal(1)
      any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
      sequence.Items.Add(any2)
      Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
      attribute1.Name = "namespace"
      attribute1.FixedValue = ds.Namespace
      type.Attributes.Add(attribute1)
      Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
      attribute2.Name = "tableTypeName"
      attribute2.FixedValue = "TemplateTransaksiDataTable"
      type.Attributes.Add(attribute2)
      type.Particle = sequence
      Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
      If xs.Contains(dsSchema.TargetNamespace) Then
        Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
        Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
        Try
          Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
          dsSchema.Write(s1)
          Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
          Do While schemas.MoveNext
            schema = CType(schemas.Current, Global.System.Xml.Schema.XmlSchema)
            s2.SetLength(0)
            schema.Write(s2)
            If (s1.Length = s2.Length) Then
              s1.Position = 0
              s2.Position = 0

              Do While ((s1.Position <> s1.Length) _
                          AndAlso (s1.ReadByte = s2.ReadByte))


              Loop
              If (s1.Position = s1.Length) Then
                Return type
              End If
            End If

          Loop
        Finally
          If (Not (s1) Is Nothing) Then
            s1.Close()
          End If
          If (Not (s2) Is Nothing) Then
            s2.Close()
          End If
        End Try
      End If
      xs.Add(dsSchema)
      Return type
    End Function
  End Class

  '''<summary>
  '''Represents the strongly named DataTable class.
  '''</summary>
  <Global.System.Serializable(), _
   Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")> _
  Partial Public Class GroupAkunDataTable
    Inherits Global.System.Data.TypedTableBase(Of GroupAkunRow)

    Private columnIDGroupAkun As Global.System.Data.DataColumn

    Private columnNoAkun As Global.System.Data.DataColumn

    Private columnNama As Global.System.Data.DataColumn

    Private columnPosisi As Global.System.Data.DataColumn

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public Sub New()
      MyBase.New()
      Me.TableName = "GroupAkun"
      Me.BeginInit()
      Me.InitClass()
      Me.EndInit()
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Friend Sub New(ByVal table As Global.System.Data.DataTable)
      MyBase.New()
      Me.TableName = table.TableName
      If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
        Me.CaseSensitive = table.CaseSensitive
      End If
      If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
        Me.Locale = table.Locale
      End If
      If (table.Namespace <> table.DataSet.Namespace) Then
        Me.Namespace = table.Namespace
      End If
      Me.Prefix = table.Prefix
      Me.MinimumCapacity = table.MinimumCapacity
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
      MyBase.New(info, context)
      Me.InitVars()
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public ReadOnly Property IDGroupAkunColumn() As Global.System.Data.DataColumn
      Get
        Return Me.columnIDGroupAkun
      End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public ReadOnly Property NoAkunColumn() As Global.System.Data.DataColumn
      Get
        Return Me.columnNoAkun
      End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public ReadOnly Property NamaColumn() As Global.System.Data.DataColumn
      Get
        Return Me.columnNama
      End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public ReadOnly Property PosisiColumn() As Global.System.Data.DataColumn
      Get
        Return Me.columnPosisi
      End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
     Global.System.ComponentModel.Browsable(False)> _
    Public ReadOnly Property Count() As Integer
      Get
        Return Me.Rows.Count
      End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Default Public ReadOnly Property Item(ByVal index As Integer) As GroupAkunRow
      Get
        Return CType(Me.Rows(index), GroupAkunRow)
      End Get
    End Property

    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public Event GroupAkunRowChanging As GroupAkunRowChangeEventHandler

    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public Event GroupAkunRowChanged As GroupAkunRowChangeEventHandler

    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public Event GroupAkunRowDeleting As GroupAkunRowChangeEventHandler

    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public Event GroupAkunRowDeleted As GroupAkunRowChangeEventHandler

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public Overloads Sub AddGroupAkunRow(ByVal row As GroupAkunRow)
      Me.Rows.Add(row)
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public Overloads Function AddGroupAkunRow(ByVal IDGroupAkun As Integer, ByVal NoAkun As String, ByVal Nama As String, ByVal Posisi As String) As GroupAkunRow
      Dim rowGroupAkunRow As GroupAkunRow = CType(Me.NewRow, GroupAkunRow)
      Dim columnValuesArray() As Object = New Object() {IDGroupAkun, NoAkun, Nama, Posisi}
      rowGroupAkunRow.ItemArray = columnValuesArray
      Me.Rows.Add(rowGroupAkunRow)
      Return rowGroupAkunRow
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public Overrides Function Clone() As Global.System.Data.DataTable
      Dim cln As GroupAkunDataTable = CType(MyBase.Clone, GroupAkunDataTable)
      cln.InitVars()
      Return cln
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
      Return New GroupAkunDataTable()
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Friend Sub InitVars()
      Me.columnIDGroupAkun = MyBase.Columns("IDGroupAkun")
      Me.columnNoAkun = MyBase.Columns("NoAkun")
      Me.columnNama = MyBase.Columns("Nama")
      Me.columnPosisi = MyBase.Columns("Posisi")
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Private Sub InitClass()
      Me.columnIDGroupAkun = New Global.System.Data.DataColumn("IDGroupAkun", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
      MyBase.Columns.Add(Me.columnIDGroupAkun)
      Me.columnNoAkun = New Global.System.Data.DataColumn("NoAkun", GetType(String), Nothing, Global.System.Data.MappingType.Element)
      MyBase.Columns.Add(Me.columnNoAkun)
      Me.columnNama = New Global.System.Data.DataColumn("Nama", GetType(String), Nothing, Global.System.Data.MappingType.Element)
      MyBase.Columns.Add(Me.columnNama)
      Me.columnPosisi = New Global.System.Data.DataColumn("Posisi", GetType(String), Nothing, Global.System.Data.MappingType.Element)
      MyBase.Columns.Add(Me.columnPosisi)
      Me.columnNoAkun.AllowDBNull = False
      Me.columnNoAkun.MaxLength = 10
      Me.columnNama.AllowDBNull = False
      Me.columnNama.MaxLength = 50
      Me.columnPosisi.AllowDBNull = False
      Me.columnPosisi.MaxLength = 1
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public Function NewGroupAkunRow() As GroupAkunRow
      Return CType(Me.NewRow, GroupAkunRow)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
      Return New GroupAkunRow(builder)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Protected Overrides Function GetRowType() As Global.System.Type
      Return GetType(GroupAkunRow)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
      MyBase.OnRowChanged(e)
      If (Not (Me.GroupAkunRowChangedEvent) Is Nothing) Then
        RaiseEvent GroupAkunRowChanged(Me, New GroupAkunRowChangeEvent(CType(e.Row, GroupAkunRow), e.Action))
      End If
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
      MyBase.OnRowChanging(e)
      If (Not (Me.GroupAkunRowChangingEvent) Is Nothing) Then
        RaiseEvent GroupAkunRowChanging(Me, New GroupAkunRowChangeEvent(CType(e.Row, GroupAkunRow), e.Action))
      End If
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
      MyBase.OnRowDeleted(e)
      If (Not (Me.GroupAkunRowDeletedEvent) Is Nothing) Then
        RaiseEvent GroupAkunRowDeleted(Me, New GroupAkunRowChangeEvent(CType(e.Row, GroupAkunRow), e.Action))
      End If
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
      MyBase.OnRowDeleting(e)
      If (Not (Me.GroupAkunRowDeletingEvent) Is Nothing) Then
        RaiseEvent GroupAkunRowDeleting(Me, New GroupAkunRowChangeEvent(CType(e.Row, GroupAkunRow), e.Action))
      End If
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public Sub RemoveGroupAkunRow(ByVal row As GroupAkunRow)
      Me.Rows.Remove(row)
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
      Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
      Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
      Dim ds As DataSetAccounting = New DataSetAccounting()
      Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
      any1.Namespace = "http://www.w3.org/2001/XMLSchema"
      any1.MinOccurs = New Decimal(0)
      any1.MaxOccurs = Decimal.MaxValue
      any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
      sequence.Items.Add(any1)
      Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
      any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
      any2.MinOccurs = New Decimal(1)
      any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
      sequence.Items.Add(any2)
      Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
      attribute1.Name = "namespace"
      attribute1.FixedValue = ds.Namespace
      type.Attributes.Add(attribute1)
      Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
      attribute2.Name = "tableTypeName"
      attribute2.FixedValue = "GroupAkunDataTable"
      type.Attributes.Add(attribute2)
      type.Particle = sequence
      Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
      If xs.Contains(dsSchema.TargetNamespace) Then
        Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
        Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
        Try
          Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
          dsSchema.Write(s1)
          Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
          Do While schemas.MoveNext
            schema = CType(schemas.Current, Global.System.Xml.Schema.XmlSchema)
            s2.SetLength(0)
            schema.Write(s2)
            If (s1.Length = s2.Length) Then
              s1.Position = 0
              s2.Position = 0

              Do While ((s1.Position <> s1.Length) _
                          AndAlso (s1.ReadByte = s2.ReadByte))


              Loop
              If (s1.Position = s1.Length) Then
                Return type
              End If
            End If

          Loop
        Finally
          If (Not (s1) Is Nothing) Then
            s1.Close()
          End If
          If (Not (s2) Is Nothing) Then
            s2.Close()
          End If
        End Try
      End If
      xs.Add(dsSchema)
      Return type
    End Function
  End Class

  '''<summary>
  '''Represents strongly named DataRow class.
  '''</summary>
  Partial Public Class COARow
    Inherits Global.System.Data.DataRow

    Private tableCOA As COADataTable

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
      MyBase.New(rb)
      Me.tableCOA = CType(Me.Table, COADataTable)
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public Property IDAkun() As Integer
      Get
        Return CType(Me(Me.tableCOA.IDAkunColumn), Integer)
      End Get
      Set(value As Integer)
        Me(Me.tableCOA.IDAkunColumn) = value
      End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public Property IDGroupAkun() As Integer
      Get
        Return CType(Me(Me.tableCOA.IDGroupAkunColumn), Integer)
      End Get
      Set(value As Integer)
        Me(Me.tableCOA.IDGroupAkunColumn) = value
      End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public Property IDAkunInduk() As Integer
      Get
        Return CType(Me(Me.tableCOA.IDAkunIndukColumn), Integer)
      End Get
      Set(value As Integer)
        Me(Me.tableCOA.IDAkunIndukColumn) = value
      End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public Property NoAkun() As String
      Get
        Return CType(Me(Me.tableCOA.NoAkunColumn), String)
      End Get
      Set(value As String)
        Me(Me.tableCOA.NoAkunColumn) = value
      End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public Property Nama() As String
      Get
        Return CType(Me(Me.tableCOA.NamaColumn), String)
      End Get
      Set(value As String)
        Me(Me.tableCOA.NamaColumn) = value
      End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public Property Posisi() As String
      Get
        Return CType(Me(Me.tableCOA.PosisiColumn), String)
      End Get
      Set(value As String)
        Me(Me.tableCOA.PosisiColumn) = value
      End Set
    End Property
  End Class

  '''<summary>
  '''Represents strongly named DataRow class.
  '''</summary>
  Partial Public Class GroupTemplateTransaksiRow
    Inherits Global.System.Data.DataRow

    Private tableGroupTemplateTransaksi As GroupTemplateTransaksiDataTable

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
      MyBase.New(rb)
      Me.tableGroupTemplateTransaksi = CType(Me.Table, GroupTemplateTransaksiDataTable)
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public Property IDGroupTemplate() As Integer
      Get
        Return CType(Me(Me.tableGroupTemplateTransaksi.IDGroupTemplateColumn), Integer)
      End Get
      Set(value As Integer)
        Me(Me.tableGroupTemplateTransaksi.IDGroupTemplateColumn) = value
      End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public Property Nama() As String
      Get
        Try
          Return CType(Me(Me.tableGroupTemplateTransaksi.NamaColumn), String)
        Catch e As Global.System.InvalidCastException
          Throw New Global.System.Data.StrongTypingException("The value for column 'Nama' in table 'GroupTemplateTransaksi' is DBNull.", e)
        End Try
      End Get
      Set(value As String)
        Me(Me.tableGroupTemplateTransaksi.NamaColumn) = value
      End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public Function IsNamaNull() As Boolean
      Return Me.IsNull(Me.tableGroupTemplateTransaksi.NamaColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public Sub SetNamaNull()
      Me(Me.tableGroupTemplateTransaksi.NamaColumn) = Global.System.Convert.DBNull
    End Sub
  End Class

  '''<summary>
  '''Represents strongly named DataRow class.
  '''</summary>
  Partial Public Class JurnalDRow
    Inherits Global.System.Data.DataRow

    Private tableJurnalD As JurnalDDataTable

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
      MyBase.New(rb)
      Me.tableJurnalD = CType(Me.Table, JurnalDDataTable)
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public Property IDJurnalH() As Long
      Get
        Return CType(Me(Me.tableJurnalD.IDJurnalHColumn), Long)
      End Get
      Set(value As Long)
        Me(Me.tableJurnalD.IDJurnalHColumn) = value
      End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public Property IDJurnalD() As Long
      Get
        Return CType(Me(Me.tableJurnalD.IDJurnalDColumn), Long)
      End Get
      Set(value As Long)
        Me(Me.tableJurnalD.IDJurnalDColumn) = value
      End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public Property IDAkun() As Integer
      Get
        Return CType(Me(Me.tableJurnalD.IDAkunColumn), Integer)
      End Get
      Set(value As Integer)
        Me(Me.tableJurnalD.IDAkunColumn) = value
      End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public Property Jumlah() As Decimal
      Get
        Return CType(Me(Me.tableJurnalD.JumlahColumn), Decimal)
      End Get
      Set(value As Decimal)
        Me(Me.tableJurnalD.JumlahColumn) = value
      End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public Property Posisi() As String
      Get
        Try
          Return CType(Me(Me.tableJurnalD.PosisiColumn), String)
        Catch e As Global.System.InvalidCastException
          Throw New Global.System.Data.StrongTypingException("The value for column 'Posisi' in table 'JurnalD' is DBNull.", e)
        End Try
      End Get
      Set(value As String)
        Me(Me.tableJurnalD.PosisiColumn) = value
      End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public Function IsPosisiNull() As Boolean
      Return Me.IsNull(Me.tableJurnalD.PosisiColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public Sub SetPosisiNull()
      Me(Me.tableJurnalD.PosisiColumn) = Global.System.Convert.DBNull
    End Sub
  End Class

  '''<summary>
  '''Represents strongly named DataRow class.
  '''</summary>
  Partial Public Class JurnalHRow
    Inherits Global.System.Data.DataRow

    Private tableJurnalH As JurnalHDataTable

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
      MyBase.New(rb)
      Me.tableJurnalH = CType(Me.Table, JurnalHDataTable)
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public Property IDJurnalH() As Long
      Get
        Return CType(Me(Me.tableJurnalH.IDJurnalHColumn), Long)
      End Get
      Set(value As Long)
        Me(Me.tableJurnalH.IDJurnalHColumn) = value
      End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public Property Tanggal() As Date
      Get
        Return CType(Me(Me.tableJurnalH.TanggalColumn), Date)
      End Get
      Set(value As Date)
        Me(Me.tableJurnalH.TanggalColumn) = value
      End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public Property Sumber() As String
      Get
        Return CType(Me(Me.tableJurnalH.SumberColumn), String)
      End Get
      Set(value As String)
        Me(Me.tableJurnalH.SumberColumn) = value
      End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public Property IDTransaksi() As Long
      Get
        Return CType(Me(Me.tableJurnalH.IDTransaksiColumn), Long)
      End Get
      Set(value As Long)
        Me(Me.tableJurnalH.IDTransaksiColumn) = value
      End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public Property Keterangan() As String
      Get
        Return CType(Me(Me.tableJurnalH.KeteranganColumn), String)
      End Get
      Set(value As String)
        Me(Me.tableJurnalH.KeteranganColumn) = value
      End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public Property StatusAktif() As Boolean
      Get
        Return CType(Me(Me.tableJurnalH.StatusAktifColumn), Boolean)
      End Get
      Set(value As Boolean)
        Me(Me.tableJurnalH.StatusAktifColumn) = value
      End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public Property IsCredited() As Boolean
      Get
        Return CType(Me(Me.tableJurnalH.IsCreditedColumn), Boolean)
      End Get
      Set(value As Boolean)
        Me(Me.tableJurnalH.IsCreditedColumn) = value
      End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public Property IDJurnalKredit() As Long
      Get
        Return CType(Me(Me.tableJurnalH.IDJurnalKreditColumn), Long)
      End Get
      Set(value As Long)
        Me(Me.tableJurnalH.IDJurnalKreditColumn) = value
      End Set
    End Property
  End Class

  '''<summary>
  '''Represents strongly named DataRow class.
  '''</summary>
  Partial Public Class TemplateTransaksiRow
    Inherits Global.System.Data.DataRow

    Private tableTemplateTransaksi As TemplateTransaksiDataTable

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
      MyBase.New(rb)
      Me.tableTemplateTransaksi = CType(Me.Table, TemplateTransaksiDataTable)
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public Property IDGroupTemplate() As Integer
      Get
        Return CType(Me(Me.tableTemplateTransaksi.IDGroupTemplateColumn), Integer)
      End Get
      Set(value As Integer)
        Me(Me.tableTemplateTransaksi.IDGroupTemplateColumn) = value
      End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public Property IDAkun() As Integer
      Get
        Return CType(Me(Me.tableTemplateTransaksi.IDAkunColumn), Integer)
      End Get
      Set(value As Integer)
        Me(Me.tableTemplateTransaksi.IDAkunColumn) = value
      End Set
    End Property
  End Class

  '''<summary>
  '''Represents strongly named DataRow class.
  '''</summary>
  Partial Public Class GroupAkunRow
    Inherits Global.System.Data.DataRow

    Private tableGroupAkun As GroupAkunDataTable

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
      MyBase.New(rb)
      Me.tableGroupAkun = CType(Me.Table, GroupAkunDataTable)
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public Property IDGroupAkun() As Integer
      Get
        Try
          Return CType(Me(Me.tableGroupAkun.IDGroupAkunColumn), Integer)
        Catch e As Global.System.InvalidCastException
          Throw New Global.System.Data.StrongTypingException("The value for column 'IDGroupAkun' in table 'GroupAkun' is DBNull.", e)
        End Try
      End Get
      Set(value As Integer)
        Me(Me.tableGroupAkun.IDGroupAkunColumn) = value
      End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public Property NoAkun() As String
      Get
        Return CType(Me(Me.tableGroupAkun.NoAkunColumn), String)
      End Get
      Set(value As String)
        Me(Me.tableGroupAkun.NoAkunColumn) = value
      End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public Property Nama() As String
      Get
        Return CType(Me(Me.tableGroupAkun.NamaColumn), String)
      End Get
      Set(value As String)
        Me(Me.tableGroupAkun.NamaColumn) = value
      End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public Property Posisi() As String
      Get
        Return CType(Me(Me.tableGroupAkun.PosisiColumn), String)
      End Get
      Set(value As String)
        Me(Me.tableGroupAkun.PosisiColumn) = value
      End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public Function IsIDGroupAkunNull() As Boolean
      Return Me.IsNull(Me.tableGroupAkun.IDGroupAkunColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public Sub SetIDGroupAkunNull()
      Me(Me.tableGroupAkun.IDGroupAkunColumn) = Global.System.Convert.DBNull
    End Sub
  End Class

  '''<summary>
  '''Row event argument class
  '''</summary>
  <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
  Public Class COARowChangeEvent
    Inherits Global.System.EventArgs

    Private eventRow As COARow

    Private eventAction As Global.System.Data.DataRowAction

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public Sub New(ByVal row As COARow, ByVal action As Global.System.Data.DataRowAction)
      MyBase.New()
      Me.eventRow = row
      Me.eventAction = action
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public ReadOnly Property Row() As COARow
      Get
        Return Me.eventRow
      End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public ReadOnly Property Action() As Global.System.Data.DataRowAction
      Get
        Return Me.eventAction
      End Get
    End Property
  End Class

  '''<summary>
  '''Row event argument class
  '''</summary>
  <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
  Public Class GroupTemplateTransaksiRowChangeEvent
    Inherits Global.System.EventArgs

    Private eventRow As GroupTemplateTransaksiRow

    Private eventAction As Global.System.Data.DataRowAction

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public Sub New(ByVal row As GroupTemplateTransaksiRow, ByVal action As Global.System.Data.DataRowAction)
      MyBase.New()
      Me.eventRow = row
      Me.eventAction = action
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public ReadOnly Property Row() As GroupTemplateTransaksiRow
      Get
        Return Me.eventRow
      End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public ReadOnly Property Action() As Global.System.Data.DataRowAction
      Get
        Return Me.eventAction
      End Get
    End Property
  End Class

  '''<summary>
  '''Row event argument class
  '''</summary>
  <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
  Public Class JurnalDRowChangeEvent
    Inherits Global.System.EventArgs

    Private eventRow As JurnalDRow

    Private eventAction As Global.System.Data.DataRowAction

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public Sub New(ByVal row As JurnalDRow, ByVal action As Global.System.Data.DataRowAction)
      MyBase.New()
      Me.eventRow = row
      Me.eventAction = action
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public ReadOnly Property Row() As JurnalDRow
      Get
        Return Me.eventRow
      End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public ReadOnly Property Action() As Global.System.Data.DataRowAction
      Get
        Return Me.eventAction
      End Get
    End Property
  End Class

  '''<summary>
  '''Row event argument class
  '''</summary>
  <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
  Public Class JurnalHRowChangeEvent
    Inherits Global.System.EventArgs

    Private eventRow As JurnalHRow

    Private eventAction As Global.System.Data.DataRowAction

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public Sub New(ByVal row As JurnalHRow, ByVal action As Global.System.Data.DataRowAction)
      MyBase.New()
      Me.eventRow = row
      Me.eventAction = action
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public ReadOnly Property Row() As JurnalHRow
      Get
        Return Me.eventRow
      End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public ReadOnly Property Action() As Global.System.Data.DataRowAction
      Get
        Return Me.eventAction
      End Get
    End Property
  End Class

  '''<summary>
  '''Row event argument class
  '''</summary>
  <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
  Public Class TemplateTransaksiRowChangeEvent
    Inherits Global.System.EventArgs

    Private eventRow As TemplateTransaksiRow

    Private eventAction As Global.System.Data.DataRowAction

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public Sub New(ByVal row As TemplateTransaksiRow, ByVal action As Global.System.Data.DataRowAction)
      MyBase.New()
      Me.eventRow = row
      Me.eventAction = action
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public ReadOnly Property Row() As TemplateTransaksiRow
      Get
        Return Me.eventRow
      End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public ReadOnly Property Action() As Global.System.Data.DataRowAction
      Get
        Return Me.eventAction
      End Get
    End Property
  End Class

  '''<summary>
  '''Row event argument class
  '''</summary>
  <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
  Public Class GroupAkunRowChangeEvent
    Inherits Global.System.EventArgs

    Private eventRow As GroupAkunRow

    Private eventAction As Global.System.Data.DataRowAction

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public Sub New(ByVal row As GroupAkunRow, ByVal action As Global.System.Data.DataRowAction)
      MyBase.New()
      Me.eventRow = row
      Me.eventAction = action
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public ReadOnly Property Row() As GroupAkunRow
      Get
        Return Me.eventRow
      End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public ReadOnly Property Action() As Global.System.Data.DataRowAction
      Get
        Return Me.eventAction
      End Get
    End Property
  End Class
End Class

Namespace DataSetAccountingTableAdapters

  '''<summary>
  '''Represents the connection and commands used to retrieve and save data.
  '''</summary>
  <Global.System.ComponentModel.DesignerCategoryAttribute("code"), _
   Global.System.ComponentModel.ToolboxItem(True), _
   Global.System.ComponentModel.DataObjectAttribute(True), _
   Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & _
      ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), _
   Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
  Partial Public Class COATableAdapter
    Inherits Global.System.ComponentModel.Component

    Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter

    Private _connection As Global.System.Data.SqlClient.SqlConnection

    Private _transaction As Global.System.Data.SqlClient.SqlTransaction

    Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand

    Private _clearBeforeFill As Boolean

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public Sub New()
      MyBase.New()
      Me.ClearBeforeFill = True
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
      Get
        If (Me._adapter Is Nothing) Then
          Me.InitAdapter()
        End If
        Return Me._adapter
      End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
      Get
        If (Me._connection Is Nothing) Then
          Me.InitConnection()
        End If
        Return Me._connection
      End Get
      Set(value As Global.System.Data.SqlClient.SqlConnection)
        Me._connection = value
        If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
          Me.Adapter.InsertCommand.Connection = value
        End If
        If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
          Me.Adapter.DeleteCommand.Connection = value
        End If
        If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
          Me.Adapter.UpdateCommand.Connection = value
        End If
        Dim i As Integer = 0
        Do While (i < Me.CommandCollection.Length)
          If (Not (Me.CommandCollection(i)) Is Nothing) Then
            CType(Me.CommandCollection(i), Global.System.Data.SqlClient.SqlCommand).Connection = value
          End If
          i = (i + 1)
        Loop
      End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
      Get
        Return Me._transaction
      End Get
      Set(value As Global.System.Data.SqlClient.SqlTransaction)
        Me._transaction = value
        Dim i As Integer = 0
        Do While (i < Me.CommandCollection.Length)
          Me.CommandCollection(i).Transaction = Me._transaction
          i = (i + 1)
        Loop
        If ((Not (Me.Adapter) Is Nothing) _
                    AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
          Me.Adapter.DeleteCommand.Transaction = Me._transaction
        End If
        If ((Not (Me.Adapter) Is Nothing) _
                    AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
          Me.Adapter.InsertCommand.Transaction = Me._transaction
        End If
        If ((Not (Me.Adapter) Is Nothing) _
                    AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
          Me.Adapter.UpdateCommand.Transaction = Me._transaction
        End If
      End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
      Get
        If (Me._commandCollection Is Nothing) Then
          Me.InitCommandCollection()
        End If
        Return Me._commandCollection
      End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public Property ClearBeforeFill() As Boolean
      Get
        Return Me._clearBeforeFill
      End Get
      Set(value As Boolean)
        Me._clearBeforeFill = value
      End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Private Sub InitAdapter()
      Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
      Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
      tableMapping.SourceTable = "Table"
      tableMapping.DataSetTable = "COA"
      tableMapping.ColumnMappings.Add("IDAkun", "IDAkun")
      tableMapping.ColumnMappings.Add("IDGroupAkun", "IDGroupAkun")
      tableMapping.ColumnMappings.Add("IDAkunInduk", "IDAkunInduk")
      tableMapping.ColumnMappings.Add("NoAkun", "NoAkun")
      tableMapping.ColumnMappings.Add("Nama", "Nama")
      tableMapping.ColumnMappings.Add("Posisi", "Posisi")
      Me._adapter.TableMappings.Add(tableMapping)
      Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
      Me._adapter.DeleteCommand.Connection = Me.Connection
      Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[COA] WHERE (([IDAkun] = @Original_IDAkun) AND ([IDGroupAkun] =" & _
          " @Original_IDGroupAkun) AND ([IDAkunInduk] = @Original_IDAkunInduk) AND ([NoAkun" & _
          "] = @Original_NoAkun) AND ([Nama] = @Original_Nama) AND ([Posisi] = @Original_Po" & _
          "sisi))"
      Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
      Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IDAkun", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IDAkun", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
      Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IDGroupAkun", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IDGroupAkun", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
      Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IDAkunInduk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IDAkunInduk", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
      Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_NoAkun", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NoAkun", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
      Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Nama", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Nama", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
      Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Posisi", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Posisi", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
      Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
      Me._adapter.InsertCommand.Connection = Me.Connection
      Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[COA] ([IDAkun], [IDGroupAkun], [IDAkunInduk], [NoAkun], [Nama]" & _
          ", [Posisi]) VALUES (@IDAkun, @IDGroupAkun, @IDAkunInduk, @NoAkun, @Nama, @Posisi" & _
          ");" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT IDAkun, IDGroupAkun, IDAkunInduk, NoAkun, Nama, Posisi FROM COA WHERE" & _
          " (IDAkun = @IDAkun)"
      Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
      Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IDAkun", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IDAkun", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
      Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IDGroupAkun", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IDGroupAkun", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
      Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IDAkunInduk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IDAkunInduk", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
      Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NoAkun", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NoAkun", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
      Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Nama", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Nama", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
      Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Posisi", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Posisi", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
      Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
      Me._adapter.UpdateCommand.Connection = Me.Connection
      Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[COA] SET [IDAkun] = @IDAkun, [IDGroupAkun] = @IDGroupAkun, [IDAkunI" & _
          "nduk] = @IDAkunInduk, [NoAkun] = @NoAkun, [Nama] = @Nama, [Posisi] = @Posisi WHE" & _
          "RE (([IDAkun] = @Original_IDAkun) AND ([IDGroupAkun] = @Original_IDGroupAkun) AN" & _
          "D ([IDAkunInduk] = @Original_IDAkunInduk) AND ([NoAkun] = @Original_NoAkun) AND " & _
          "([Nama] = @Original_Nama) AND ([Posisi] = @Original_Posisi));" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT IDAkun, ID" & _
          "GroupAkun, IDAkunInduk, NoAkun, Nama, Posisi FROM COA WHERE (IDAkun = @IDAkun)"
      Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
      Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IDAkun", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IDAkun", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
      Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IDGroupAkun", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IDGroupAkun", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
      Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IDAkunInduk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IDAkunInduk", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
      Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NoAkun", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NoAkun", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
      Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Nama", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Nama", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
      Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Posisi", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Posisi", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
      Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IDAkun", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IDAkun", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
      Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IDGroupAkun", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IDGroupAkun", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
      Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IDAkunInduk", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IDAkunInduk", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
      Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_NoAkun", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NoAkun", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
      Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Nama", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Nama", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
      Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Posisi", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Posisi", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Private Sub InitConnection()
      Me._connection = New Global.System.Data.SqlClient.SqlConnection()
      Me._connection.ConnectionString = Global.Cafe_Management.Settings.Default.connString
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Private Sub InitCommandCollection()
      Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
      Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
      Me._commandCollection(0).Connection = Me.Connection
      Me._commandCollection(0).CommandText = "SELECT IDAkun, IDGroupAkun, IDAkunInduk, NoAkun, Nama, Posisi FROM dbo.COA"
      Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
     Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)> _
    Public Overridable Overloads Function Fill(ByVal dataTable As DataSetAccounting.COADataTable) As Integer
      Me.Adapter.SelectCommand = Me.CommandCollection(0)
      If (Me.ClearBeforeFill = True) Then
        dataTable.Clear()
      End If
      Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
      Return returnValue
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
     Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)> _
    Public Overridable Overloads Function GetData() As DataSetAccounting.COADataTable
      Me.Adapter.SelectCommand = Me.CommandCollection(0)
      Dim dataTable As DataSetAccounting.COADataTable = New DataSetAccounting.COADataTable()
      Me.Adapter.Fill(dataTable)
      Return dataTable
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Public Overridable Overloads Function Update(ByVal dataTable As DataSetAccounting.COADataTable) As Integer
      Return Me.Adapter.Update(dataTable)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Public Overridable Overloads Function Update(ByVal dataSet As DataSetAccounting) As Integer
      Return Me.Adapter.Update(dataSet, "COA")
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Public Overridable Overloads Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
      Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Public Overridable Overloads Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
      Return Me.Adapter.Update(dataRows)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
     Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)> _
    Public Overridable Overloads Function Delete(ByVal Original_IDAkun As Integer, ByVal Original_IDGroupAkun As Integer, ByVal Original_IDAkunInduk As Integer, ByVal Original_NoAkun As String, ByVal Original_Nama As String, ByVal Original_Posisi As String) As Integer
      Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_IDAkun, Integer)
      Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_IDGroupAkun, Integer)
      Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_IDAkunInduk, Integer)
      If (Original_NoAkun Is Nothing) Then
        Throw New Global.System.ArgumentNullException("Original_NoAkun")
      Else
        Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_NoAkun, String)
      End If
      If (Original_Nama Is Nothing) Then
        Throw New Global.System.ArgumentNullException("Original_Nama")
      Else
        Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_Nama, String)
      End If
      If (Original_Posisi Is Nothing) Then
        Throw New Global.System.ArgumentNullException("Original_Posisi")
      Else
        Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_Posisi, String)
      End If
      Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
      If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                  <> Global.System.Data.ConnectionState.Open) Then
        Me.Adapter.DeleteCommand.Connection.Open()
      End If
      Try
        Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
        Return returnValue
      Finally
        If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
          Me.Adapter.DeleteCommand.Connection.Close()
        End If
      End Try
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
     Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)> _
    Public Overridable Overloads Function Insert(ByVal IDAkun As Integer, ByVal IDGroupAkun As Integer, ByVal IDAkunInduk As Integer, ByVal NoAkun As String, ByVal Nama As String, ByVal Posisi As String) As Integer
      Me.Adapter.InsertCommand.Parameters(0).Value = CType(IDAkun, Integer)
      Me.Adapter.InsertCommand.Parameters(1).Value = CType(IDGroupAkun, Integer)
      Me.Adapter.InsertCommand.Parameters(2).Value = CType(IDAkunInduk, Integer)
      If (NoAkun Is Nothing) Then
        Throw New Global.System.ArgumentNullException("NoAkun")
      Else
        Me.Adapter.InsertCommand.Parameters(3).Value = CType(NoAkun, String)
      End If
      If (Nama Is Nothing) Then
        Throw New Global.System.ArgumentNullException("Nama")
      Else
        Me.Adapter.InsertCommand.Parameters(4).Value = CType(Nama, String)
      End If
      If (Posisi Is Nothing) Then
        Throw New Global.System.ArgumentNullException("Posisi")
      Else
        Me.Adapter.InsertCommand.Parameters(5).Value = CType(Posisi, String)
      End If
      Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
      If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                  <> Global.System.Data.ConnectionState.Open) Then
        Me.Adapter.InsertCommand.Connection.Open()
      End If
      Try
        Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
        Return returnValue
      Finally
        If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
          Me.Adapter.InsertCommand.Connection.Close()
        End If
      End Try
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
     Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
    Public Overridable Overloads Function Update(ByVal IDAkun As Integer, ByVal IDGroupAkun As Integer, ByVal IDAkunInduk As Integer, ByVal NoAkun As String, ByVal Nama As String, ByVal Posisi As String, ByVal Original_IDAkun As Integer, ByVal Original_IDGroupAkun As Integer, ByVal Original_IDAkunInduk As Integer, ByVal Original_NoAkun As String, ByVal Original_Nama As String, ByVal Original_Posisi As String) As Integer
      Me.Adapter.UpdateCommand.Parameters(0).Value = CType(IDAkun, Integer)
      Me.Adapter.UpdateCommand.Parameters(1).Value = CType(IDGroupAkun, Integer)
      Me.Adapter.UpdateCommand.Parameters(2).Value = CType(IDAkunInduk, Integer)
      If (NoAkun Is Nothing) Then
        Throw New Global.System.ArgumentNullException("NoAkun")
      Else
        Me.Adapter.UpdateCommand.Parameters(3).Value = CType(NoAkun, String)
      End If
      If (Nama Is Nothing) Then
        Throw New Global.System.ArgumentNullException("Nama")
      Else
        Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Nama, String)
      End If
      If (Posisi Is Nothing) Then
        Throw New Global.System.ArgumentNullException("Posisi")
      Else
        Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Posisi, String)
      End If
      Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_IDAkun, Integer)
      Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_IDGroupAkun, Integer)
      Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_IDAkunInduk, Integer)
      If (Original_NoAkun Is Nothing) Then
        Throw New Global.System.ArgumentNullException("Original_NoAkun")
      Else
        Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_NoAkun, String)
      End If
      If (Original_Nama Is Nothing) Then
        Throw New Global.System.ArgumentNullException("Original_Nama")
      Else
        Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_Nama, String)
      End If
      If (Original_Posisi Is Nothing) Then
        Throw New Global.System.ArgumentNullException("Original_Posisi")
      Else
        Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Original_Posisi, String)
      End If
      Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
      If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                  <> Global.System.Data.ConnectionState.Open) Then
        Me.Adapter.UpdateCommand.Connection.Open()
      End If
      Try
        Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
        Return returnValue
      Finally
        If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
          Me.Adapter.UpdateCommand.Connection.Close()
        End If
      End Try
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
     Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
    Public Overridable Overloads Function Update(ByVal IDGroupAkun As Integer, ByVal IDAkunInduk As Integer, ByVal NoAkun As String, ByVal Nama As String, ByVal Posisi As String, ByVal Original_IDAkun As Integer, ByVal Original_IDGroupAkun As Integer, ByVal Original_IDAkunInduk As Integer, ByVal Original_NoAkun As String, ByVal Original_Nama As String, ByVal Original_Posisi As String) As Integer
      Return Me.Update(Original_IDAkun, IDGroupAkun, IDAkunInduk, NoAkun, Nama, Posisi, Original_IDAkun, Original_IDGroupAkun, Original_IDAkunInduk, Original_NoAkun, Original_Nama, Original_Posisi)
    End Function
  End Class

  '''<summary>
  '''Represents the connection and commands used to retrieve and save data.
  '''</summary>
  <Global.System.ComponentModel.DesignerCategoryAttribute("code"), _
   Global.System.ComponentModel.ToolboxItem(True), _
   Global.System.ComponentModel.DataObjectAttribute(True), _
   Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & _
      ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), _
   Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
  Partial Public Class GroupTemplateTransaksiTableAdapter
    Inherits Global.System.ComponentModel.Component

    Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter

    Private _connection As Global.System.Data.SqlClient.SqlConnection

    Private _transaction As Global.System.Data.SqlClient.SqlTransaction

    Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand

    Private _clearBeforeFill As Boolean

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public Sub New()
      MyBase.New()
      Me.ClearBeforeFill = True
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
      Get
        If (Me._adapter Is Nothing) Then
          Me.InitAdapter()
        End If
        Return Me._adapter
      End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
      Get
        If (Me._connection Is Nothing) Then
          Me.InitConnection()
        End If
        Return Me._connection
      End Get
      Set(value As Global.System.Data.SqlClient.SqlConnection)
        Me._connection = value
        If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
          Me.Adapter.InsertCommand.Connection = value
        End If
        If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
          Me.Adapter.DeleteCommand.Connection = value
        End If
        If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
          Me.Adapter.UpdateCommand.Connection = value
        End If
        Dim i As Integer = 0
        Do While (i < Me.CommandCollection.Length)
          If (Not (Me.CommandCollection(i)) Is Nothing) Then
            CType(Me.CommandCollection(i), Global.System.Data.SqlClient.SqlCommand).Connection = value
          End If
          i = (i + 1)
        Loop
      End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
      Get
        Return Me._transaction
      End Get
      Set(value As Global.System.Data.SqlClient.SqlTransaction)
        Me._transaction = value
        Dim i As Integer = 0
        Do While (i < Me.CommandCollection.Length)
          Me.CommandCollection(i).Transaction = Me._transaction
          i = (i + 1)
        Loop
        If ((Not (Me.Adapter) Is Nothing) _
                    AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
          Me.Adapter.DeleteCommand.Transaction = Me._transaction
        End If
        If ((Not (Me.Adapter) Is Nothing) _
                    AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
          Me.Adapter.InsertCommand.Transaction = Me._transaction
        End If
        If ((Not (Me.Adapter) Is Nothing) _
                    AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
          Me.Adapter.UpdateCommand.Transaction = Me._transaction
        End If
      End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
      Get
        If (Me._commandCollection Is Nothing) Then
          Me.InitCommandCollection()
        End If
        Return Me._commandCollection
      End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public Property ClearBeforeFill() As Boolean
      Get
        Return Me._clearBeforeFill
      End Get
      Set(value As Boolean)
        Me._clearBeforeFill = value
      End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Private Sub InitAdapter()
      Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
      Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
      tableMapping.SourceTable = "Table"
      tableMapping.DataSetTable = "GroupTemplateTransaksi"
      tableMapping.ColumnMappings.Add("IDGroupTemplate", "IDGroupTemplate")
      tableMapping.ColumnMappings.Add("Nama", "Nama")
      Me._adapter.TableMappings.Add(tableMapping)
      Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
      Me._adapter.DeleteCommand.Connection = Me.Connection
      Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[GroupTemplateTransaksi] WHERE (([IDGroupTemplate] = @Original_" & _
          "IDGroupTemplate) AND ((@IsNull_Nama = 1 AND [Nama] IS NULL) OR ([Nama] = @Origin" & _
          "al_Nama)))"
      Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
      Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IDGroupTemplate", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IDGroupTemplate", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
      Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Nama", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Nama", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
      Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Nama", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Nama", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
      Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
      Me._adapter.InsertCommand.Connection = Me.Connection
      Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[GroupTemplateTransaksi] ([IDGroupTemplate], [Nama]) VALUES (@I" & _
          "DGroupTemplate, @Nama);" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT IDGroupTemplate, Nama FROM GroupTemplateTransaks" & _
          "i WHERE (IDGroupTemplate = @IDGroupTemplate)"
      Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
      Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IDGroupTemplate", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IDGroupTemplate", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
      Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Nama", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Nama", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
      Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
      Me._adapter.UpdateCommand.Connection = Me.Connection
      Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[GroupTemplateTransaksi] SET [IDGroupTemplate] = @IDGroupTemplate, [" & _
          "Nama] = @Nama WHERE (([IDGroupTemplate] = @Original_IDGroupTemplate) AND ((@IsNu" & _
          "ll_Nama = 1 AND [Nama] IS NULL) OR ([Nama] = @Original_Nama)));" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT IDGroupT" & _
          "emplate, Nama FROM GroupTemplateTransaksi WHERE (IDGroupTemplate = @IDGroupTempl" & _
          "ate)"
      Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
      Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IDGroupTemplate", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IDGroupTemplate", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
      Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Nama", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Nama", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
      Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IDGroupTemplate", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IDGroupTemplate", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
      Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Nama", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Nama", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
      Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Nama", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Nama", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Private Sub InitConnection()
      Me._connection = New Global.System.Data.SqlClient.SqlConnection()
      Me._connection.ConnectionString = Global.Cafe_Management.Settings.Default.connString
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Private Sub InitCommandCollection()
      Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
      Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
      Me._commandCollection(0).Connection = Me.Connection
      Me._commandCollection(0).CommandText = "SELECT IDGroupTemplate, Nama FROM dbo.GroupTemplateTransaksi"
      Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
     Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)> _
    Public Overridable Overloads Function Fill(ByVal dataTable As DataSetAccounting.GroupTemplateTransaksiDataTable) As Integer
      Me.Adapter.SelectCommand = Me.CommandCollection(0)
      If (Me.ClearBeforeFill = True) Then
        dataTable.Clear()
      End If
      Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
      Return returnValue
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
     Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)> _
    Public Overridable Overloads Function GetData() As DataSetAccounting.GroupTemplateTransaksiDataTable
      Me.Adapter.SelectCommand = Me.CommandCollection(0)
      Dim dataTable As DataSetAccounting.GroupTemplateTransaksiDataTable = New DataSetAccounting.GroupTemplateTransaksiDataTable()
      Me.Adapter.Fill(dataTable)
      Return dataTable
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Public Overridable Overloads Function Update(ByVal dataTable As DataSetAccounting.GroupTemplateTransaksiDataTable) As Integer
      Return Me.Adapter.Update(dataTable)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Public Overridable Overloads Function Update(ByVal dataSet As DataSetAccounting) As Integer
      Return Me.Adapter.Update(dataSet, "GroupTemplateTransaksi")
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Public Overridable Overloads Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
      Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Public Overridable Overloads Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
      Return Me.Adapter.Update(dataRows)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
     Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)> _
    Public Overridable Overloads Function Delete(ByVal Original_IDGroupTemplate As Integer, ByVal Original_Nama As String) As Integer
      Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_IDGroupTemplate, Integer)
      If (Original_Nama Is Nothing) Then
        Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1, Object)
        Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
      Else
        Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0, Object)
        Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_Nama, String)
      End If
      Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
      If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                  <> Global.System.Data.ConnectionState.Open) Then
        Me.Adapter.DeleteCommand.Connection.Open()
      End If
      Try
        Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
        Return returnValue
      Finally
        If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
          Me.Adapter.DeleteCommand.Connection.Close()
        End If
      End Try
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
     Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)> _
    Public Overridable Overloads Function Insert(ByVal IDGroupTemplate As Integer, ByVal Nama As String) As Integer
      Me.Adapter.InsertCommand.Parameters(0).Value = CType(IDGroupTemplate, Integer)
      If (Nama Is Nothing) Then
        Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
      Else
        Me.Adapter.InsertCommand.Parameters(1).Value = CType(Nama, String)
      End If
      Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
      If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                  <> Global.System.Data.ConnectionState.Open) Then
        Me.Adapter.InsertCommand.Connection.Open()
      End If
      Try
        Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
        Return returnValue
      Finally
        If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
          Me.Adapter.InsertCommand.Connection.Close()
        End If
      End Try
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
     Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
    Public Overridable Overloads Function Update(ByVal IDGroupTemplate As Integer, ByVal Nama As String, ByVal Original_IDGroupTemplate As Integer, ByVal Original_Nama As String) As Integer
      Me.Adapter.UpdateCommand.Parameters(0).Value = CType(IDGroupTemplate, Integer)
      If (Nama Is Nothing) Then
        Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
      Else
        Me.Adapter.UpdateCommand.Parameters(1).Value = CType(Nama, String)
      End If
      Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_IDGroupTemplate, Integer)
      If (Original_Nama Is Nothing) Then
        Me.Adapter.UpdateCommand.Parameters(3).Value = CType(1, Object)
        Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
      Else
        Me.Adapter.UpdateCommand.Parameters(3).Value = CType(0, Object)
        Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_Nama, String)
      End If
      Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
      If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                  <> Global.System.Data.ConnectionState.Open) Then
        Me.Adapter.UpdateCommand.Connection.Open()
      End If
      Try
        Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
        Return returnValue
      Finally
        If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
          Me.Adapter.UpdateCommand.Connection.Close()
        End If
      End Try
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
     Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
    Public Overridable Overloads Function Update(ByVal Nama As String, ByVal Original_IDGroupTemplate As Integer, ByVal Original_Nama As String) As Integer
      Return Me.Update(Original_IDGroupTemplate, Nama, Original_IDGroupTemplate, Original_Nama)
    End Function
  End Class

  '''<summary>
  '''Represents the connection and commands used to retrieve and save data.
  '''</summary>
  <Global.System.ComponentModel.DesignerCategoryAttribute("code"), _
   Global.System.ComponentModel.ToolboxItem(True), _
   Global.System.ComponentModel.DataObjectAttribute(True), _
   Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & _
      ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), _
   Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
  Partial Public Class JurnalDTableAdapter
    Inherits Global.System.ComponentModel.Component

    Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter

    Private _connection As Global.System.Data.SqlClient.SqlConnection

    Private _transaction As Global.System.Data.SqlClient.SqlTransaction

    Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand

    Private _clearBeforeFill As Boolean

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public Sub New()
      MyBase.New()
      Me.ClearBeforeFill = True
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
      Get
        If (Me._adapter Is Nothing) Then
          Me.InitAdapter()
        End If
        Return Me._adapter
      End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
      Get
        If (Me._connection Is Nothing) Then
          Me.InitConnection()
        End If
        Return Me._connection
      End Get
      Set(value As Global.System.Data.SqlClient.SqlConnection)
        Me._connection = value
        If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
          Me.Adapter.InsertCommand.Connection = value
        End If
        If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
          Me.Adapter.DeleteCommand.Connection = value
        End If
        If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
          Me.Adapter.UpdateCommand.Connection = value
        End If
        Dim i As Integer = 0
        Do While (i < Me.CommandCollection.Length)
          If (Not (Me.CommandCollection(i)) Is Nothing) Then
            CType(Me.CommandCollection(i), Global.System.Data.SqlClient.SqlCommand).Connection = value
          End If
          i = (i + 1)
        Loop
      End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
      Get
        Return Me._transaction
      End Get
      Set(value As Global.System.Data.SqlClient.SqlTransaction)
        Me._transaction = value
        Dim i As Integer = 0
        Do While (i < Me.CommandCollection.Length)
          Me.CommandCollection(i).Transaction = Me._transaction
          i = (i + 1)
        Loop
        If ((Not (Me.Adapter) Is Nothing) _
                    AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
          Me.Adapter.DeleteCommand.Transaction = Me._transaction
        End If
        If ((Not (Me.Adapter) Is Nothing) _
                    AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
          Me.Adapter.InsertCommand.Transaction = Me._transaction
        End If
        If ((Not (Me.Adapter) Is Nothing) _
                    AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
          Me.Adapter.UpdateCommand.Transaction = Me._transaction
        End If
      End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
      Get
        If (Me._commandCollection Is Nothing) Then
          Me.InitCommandCollection()
        End If
        Return Me._commandCollection
      End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public Property ClearBeforeFill() As Boolean
      Get
        Return Me._clearBeforeFill
      End Get
      Set(value As Boolean)
        Me._clearBeforeFill = value
      End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Private Sub InitAdapter()
      Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
      Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
      tableMapping.SourceTable = "Table"
      tableMapping.DataSetTable = "JurnalD"
      tableMapping.ColumnMappings.Add("IDJurnalH", "IDJurnalH")
      tableMapping.ColumnMappings.Add("IDJurnalD", "IDJurnalD")
      tableMapping.ColumnMappings.Add("IDAkun", "IDAkun")
      tableMapping.ColumnMappings.Add("Jumlah", "Jumlah")
      tableMapping.ColumnMappings.Add("Posisi", "Posisi")
      Me._adapter.TableMappings.Add(tableMapping)
      Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
      Me._adapter.DeleteCommand.Connection = Me.Connection
      Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[JurnalD] WHERE (([IDJurnalH] = @Original_IDJurnalH) AND ([IDJu" & _
          "rnalD] = @Original_IDJurnalD) AND ([IDAkun] = @Original_IDAkun) AND ([Jumlah] = " & _
          "@Original_Jumlah) AND ((@IsNull_Posisi = 1 AND [Posisi] IS NULL) OR ([Posisi] = " & _
          "@Original_Posisi)))"
      Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
      Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IDJurnalH", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IDJurnalH", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
      Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IDJurnalD", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IDJurnalD", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
      Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IDAkun", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IDAkun", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
      Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Jumlah", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "Jumlah", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
      Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Posisi", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Posisi", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
      Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Posisi", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Posisi", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
      Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
      Me._adapter.InsertCommand.Connection = Me.Connection
      Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[JurnalD] ([IDJurnalH], [IDJurnalD], [IDAkun], [Jumlah], [Posis" & _
          "i]) VALUES (@IDJurnalH, @IDJurnalD, @IDAkun, @Jumlah, @Posisi);" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT IDJurnal" & _
          "H, IDJurnalD, IDAkun, Jumlah, Posisi FROM JurnalD WHERE (IDJurnalD = @IDJurnalD)" & _
          ""
      Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
      Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IDJurnalH", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IDJurnalH", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
      Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IDJurnalD", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IDJurnalD", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
      Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IDAkun", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IDAkun", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
      Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Jumlah", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "Jumlah", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
      Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Posisi", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Posisi", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
      Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
      Me._adapter.UpdateCommand.Connection = Me.Connection
      Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[JurnalD] SET [IDJurnalH] = @IDJurnalH, [IDJurnalD] = @IDJurnalD, [I" & _
          "DAkun] = @IDAkun, [Jumlah] = @Jumlah, [Posisi] = @Posisi WHERE (([IDJurnalH] = @" & _
          "Original_IDJurnalH) AND ([IDJurnalD] = @Original_IDJurnalD) AND ([IDAkun] = @Ori" & _
          "ginal_IDAkun) AND ([Jumlah] = @Original_Jumlah) AND ((@IsNull_Posisi = 1 AND [Po" & _
          "sisi] IS NULL) OR ([Posisi] = @Original_Posisi)));" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT IDJurnalH, IDJurnalD," & _
          " IDAkun, Jumlah, Posisi FROM JurnalD WHERE (IDJurnalD = @IDJurnalD)"
      Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
      Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IDJurnalH", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IDJurnalH", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
      Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IDJurnalD", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IDJurnalD", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
      Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IDAkun", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IDAkun", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
      Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Jumlah", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "Jumlah", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
      Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Posisi", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Posisi", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
      Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IDJurnalH", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IDJurnalH", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
      Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IDJurnalD", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IDJurnalD", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
      Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IDAkun", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IDAkun", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
      Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Jumlah", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "Jumlah", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
      Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Posisi", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Posisi", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
      Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Posisi", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Posisi", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Private Sub InitConnection()
      Me._connection = New Global.System.Data.SqlClient.SqlConnection()
      Me._connection.ConnectionString = Global.Cafe_Management.Settings.Default.connString
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Private Sub InitCommandCollection()
      Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
      Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
      Me._commandCollection(0).Connection = Me.Connection
      Me._commandCollection(0).CommandText = "SELECT IDJurnalH, IDJurnalD, IDAkun, Jumlah, Posisi FROM dbo.JurnalD"
      Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
     Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)> _
    Public Overridable Overloads Function Fill(ByVal dataTable As DataSetAccounting.JurnalDDataTable) As Integer
      Me.Adapter.SelectCommand = Me.CommandCollection(0)
      If (Me.ClearBeforeFill = True) Then
        dataTable.Clear()
      End If
      Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
      Return returnValue
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
     Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)> _
    Public Overridable Overloads Function GetData() As DataSetAccounting.JurnalDDataTable
      Me.Adapter.SelectCommand = Me.CommandCollection(0)
      Dim dataTable As DataSetAccounting.JurnalDDataTable = New DataSetAccounting.JurnalDDataTable()
      Me.Adapter.Fill(dataTable)
      Return dataTable
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Public Overridable Overloads Function Update(ByVal dataTable As DataSetAccounting.JurnalDDataTable) As Integer
      Return Me.Adapter.Update(dataTable)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Public Overridable Overloads Function Update(ByVal dataSet As DataSetAccounting) As Integer
      Return Me.Adapter.Update(dataSet, "JurnalD")
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Public Overridable Overloads Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
      Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Public Overridable Overloads Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
      Return Me.Adapter.Update(dataRows)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
     Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)> _
    Public Overridable Overloads Function Delete(ByVal Original_IDJurnalH As Long, ByVal Original_IDJurnalD As Long, ByVal Original_IDAkun As Integer, ByVal Original_Jumlah As Decimal, ByVal Original_Posisi As String) As Integer
      Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_IDJurnalH, Long)
      Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_IDJurnalD, Long)
      Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_IDAkun, Integer)
      Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_Jumlah, Decimal)
      If (Original_Posisi Is Nothing) Then
        Me.Adapter.DeleteCommand.Parameters(4).Value = CType(1, Object)
        Me.Adapter.DeleteCommand.Parameters(5).Value = Global.System.DBNull.Value
      Else
        Me.Adapter.DeleteCommand.Parameters(4).Value = CType(0, Object)
        Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_Posisi, String)
      End If
      Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
      If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                  <> Global.System.Data.ConnectionState.Open) Then
        Me.Adapter.DeleteCommand.Connection.Open()
      End If
      Try
        Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
        Return returnValue
      Finally
        If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
          Me.Adapter.DeleteCommand.Connection.Close()
        End If
      End Try
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
     Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)> _
    Public Overridable Overloads Function Insert(ByVal IDJurnalH As Long, ByVal IDJurnalD As Long, ByVal IDAkun As Integer, ByVal Jumlah As Decimal, ByVal Posisi As String) As Integer
      Me.Adapter.InsertCommand.Parameters(0).Value = CType(IDJurnalH, Long)
      Me.Adapter.InsertCommand.Parameters(1).Value = CType(IDJurnalD, Long)
      Me.Adapter.InsertCommand.Parameters(2).Value = CType(IDAkun, Integer)
      Me.Adapter.InsertCommand.Parameters(3).Value = CType(Jumlah, Decimal)
      If (Posisi Is Nothing) Then
        Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
      Else
        Me.Adapter.InsertCommand.Parameters(4).Value = CType(Posisi, String)
      End If
      Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
      If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                  <> Global.System.Data.ConnectionState.Open) Then
        Me.Adapter.InsertCommand.Connection.Open()
      End If
      Try
        Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
        Return returnValue
      Finally
        If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
          Me.Adapter.InsertCommand.Connection.Close()
        End If
      End Try
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
     Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
    Public Overridable Overloads Function Update(ByVal IDJurnalH As Long, ByVal IDJurnalD As Long, ByVal IDAkun As Integer, ByVal Jumlah As Decimal, ByVal Posisi As String, ByVal Original_IDJurnalH As Long, ByVal Original_IDJurnalD As Long, ByVal Original_IDAkun As Integer, ByVal Original_Jumlah As Decimal, ByVal Original_Posisi As String) As Integer
      Me.Adapter.UpdateCommand.Parameters(0).Value = CType(IDJurnalH, Long)
      Me.Adapter.UpdateCommand.Parameters(1).Value = CType(IDJurnalD, Long)
      Me.Adapter.UpdateCommand.Parameters(2).Value = CType(IDAkun, Integer)
      Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Jumlah, Decimal)
      If (Posisi Is Nothing) Then
        Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
      Else
        Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Posisi, String)
      End If
      Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_IDJurnalH, Long)
      Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_IDJurnalD, Long)
      Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_IDAkun, Integer)
      Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_Jumlah, Decimal)
      If (Original_Posisi Is Nothing) Then
        Me.Adapter.UpdateCommand.Parameters(9).Value = CType(1, Object)
        Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
      Else
        Me.Adapter.UpdateCommand.Parameters(9).Value = CType(0, Object)
        Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_Posisi, String)
      End If
      Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
      If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                  <> Global.System.Data.ConnectionState.Open) Then
        Me.Adapter.UpdateCommand.Connection.Open()
      End If
      Try
        Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
        Return returnValue
      Finally
        If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
          Me.Adapter.UpdateCommand.Connection.Close()
        End If
      End Try
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
     Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
    Public Overridable Overloads Function Update(ByVal IDJurnalH As Long, ByVal IDAkun As Integer, ByVal Jumlah As Decimal, ByVal Posisi As String, ByVal Original_IDJurnalH As Long, ByVal Original_IDJurnalD As Long, ByVal Original_IDAkun As Integer, ByVal Original_Jumlah As Decimal, ByVal Original_Posisi As String) As Integer
      Return Me.Update(IDJurnalH, Original_IDJurnalD, IDAkun, Jumlah, Posisi, Original_IDJurnalH, Original_IDJurnalD, Original_IDAkun, Original_Jumlah, Original_Posisi)
    End Function
  End Class

  '''<summary>
  '''Represents the connection and commands used to retrieve and save data.
  '''</summary>
  <Global.System.ComponentModel.DesignerCategoryAttribute("code"), _
   Global.System.ComponentModel.ToolboxItem(True), _
   Global.System.ComponentModel.DataObjectAttribute(True), _
   Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & _
      ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), _
   Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
  Partial Public Class JurnalHTableAdapter
    Inherits Global.System.ComponentModel.Component

    Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter

    Private _connection As Global.System.Data.SqlClient.SqlConnection

    Private _transaction As Global.System.Data.SqlClient.SqlTransaction

    Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand

    Private _clearBeforeFill As Boolean

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public Sub New()
      MyBase.New()
      Me.ClearBeforeFill = True
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
      Get
        If (Me._adapter Is Nothing) Then
          Me.InitAdapter()
        End If
        Return Me._adapter
      End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
      Get
        If (Me._connection Is Nothing) Then
          Me.InitConnection()
        End If
        Return Me._connection
      End Get
      Set(value As Global.System.Data.SqlClient.SqlConnection)
        Me._connection = value
        If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
          Me.Adapter.InsertCommand.Connection = value
        End If
        If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
          Me.Adapter.DeleteCommand.Connection = value
        End If
        If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
          Me.Adapter.UpdateCommand.Connection = value
        End If
        Dim i As Integer = 0
        Do While (i < Me.CommandCollection.Length)
          If (Not (Me.CommandCollection(i)) Is Nothing) Then
            CType(Me.CommandCollection(i), Global.System.Data.SqlClient.SqlCommand).Connection = value
          End If
          i = (i + 1)
        Loop
      End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
      Get
        Return Me._transaction
      End Get
      Set(value As Global.System.Data.SqlClient.SqlTransaction)
        Me._transaction = value
        Dim i As Integer = 0
        Do While (i < Me.CommandCollection.Length)
          Me.CommandCollection(i).Transaction = Me._transaction
          i = (i + 1)
        Loop
        If ((Not (Me.Adapter) Is Nothing) _
                    AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
          Me.Adapter.DeleteCommand.Transaction = Me._transaction
        End If
        If ((Not (Me.Adapter) Is Nothing) _
                    AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
          Me.Adapter.InsertCommand.Transaction = Me._transaction
        End If
        If ((Not (Me.Adapter) Is Nothing) _
                    AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
          Me.Adapter.UpdateCommand.Transaction = Me._transaction
        End If
      End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
      Get
        If (Me._commandCollection Is Nothing) Then
          Me.InitCommandCollection()
        End If
        Return Me._commandCollection
      End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public Property ClearBeforeFill() As Boolean
      Get
        Return Me._clearBeforeFill
      End Get
      Set(value As Boolean)
        Me._clearBeforeFill = value
      End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Private Sub InitAdapter()
      Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
      Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
      tableMapping.SourceTable = "Table"
      tableMapping.DataSetTable = "JurnalH"
      tableMapping.ColumnMappings.Add("IDJurnalH", "IDJurnalH")
      tableMapping.ColumnMappings.Add("Tanggal", "Tanggal")
      tableMapping.ColumnMappings.Add("Sumber", "Sumber")
      tableMapping.ColumnMappings.Add("IDTransaksi", "IDTransaksi")
      tableMapping.ColumnMappings.Add("Keterangan", "Keterangan")
      tableMapping.ColumnMappings.Add("StatusAktif", "StatusAktif")
      tableMapping.ColumnMappings.Add("IsCredited", "IsCredited")
      tableMapping.ColumnMappings.Add("IDJurnalKredit", "IDJurnalKredit")
      Me._adapter.TableMappings.Add(tableMapping)
      Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
      Me._adapter.DeleteCommand.Connection = Me.Connection
      Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[JurnalH] WHERE (([IDJurnalH] = @Original_IDJurnalH) AND ([Tang" & _
          "gal] = @Original_Tanggal) AND ([Sumber] = @Original_Sumber) AND ([IDTransaksi] =" & _
          " @Original_IDTransaksi) AND ([Keterangan] = @Original_Keterangan) AND ([StatusAk" & _
          "tif] = @Original_StatusAktif) AND ([IsCredited] = @Original_IsCredited) AND ([ID" & _
          "JurnalKredit] = @Original_IDJurnalKredit))"
      Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
      Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IDJurnalH", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IDJurnalH", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
      Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Tanggal", Global.System.Data.SqlDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Tanggal", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
      Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Sumber", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Sumber", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
      Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IDTransaksi", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IDTransaksi", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
      Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Keterangan", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Keterangan", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
      Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_StatusAktif", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "StatusAktif", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
      Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IsCredited", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IsCredited", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
      Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IDJurnalKredit", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IDJurnalKredit", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
      Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
      Me._adapter.InsertCommand.Connection = Me.Connection
      Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[JurnalH] ([IDJurnalH], [Tanggal], [Sumber], [IDTransaksi], [Ke" & _
          "terangan], [StatusAktif], [IsCredited], [IDJurnalKredit]) VALUES (@IDJurnalH, @T" & _
          "anggal, @Sumber, @IDTransaksi, @Keterangan, @StatusAktif, @IsCredited, @IDJurnal" & _
          "Kredit);" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT IDJurnalH, Tanggal, Sumber, IDTransaksi, Keterangan, StatusAkti" & _
          "f, IsCredited, IDJurnalKredit FROM JurnalH WHERE (IDJurnalH = @IDJurnalH)"
      Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
      Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IDJurnalH", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IDJurnalH", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
      Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Tanggal", Global.System.Data.SqlDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Tanggal", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
      Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Sumber", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Sumber", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
      Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IDTransaksi", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IDTransaksi", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
      Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Keterangan", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Keterangan", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
      Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@StatusAktif", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "StatusAktif", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
      Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsCredited", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IsCredited", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
      Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IDJurnalKredit", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IDJurnalKredit", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
      Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
      Me._adapter.UpdateCommand.Connection = Me.Connection
      Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[JurnalH] SET [IDJurnalH] = @IDJurnalH, [Tanggal] = @Tanggal, [Sumbe" & _
          "r] = @Sumber, [IDTransaksi] = @IDTransaksi, [Keterangan] = @Keterangan, [StatusA" & _
          "ktif] = @StatusAktif, [IsCredited] = @IsCredited, [IDJurnalKredit] = @IDJurnalKr" & _
          "edit WHERE (([IDJurnalH] = @Original_IDJurnalH) AND ([Tanggal] = @Original_Tangg" & _
          "al) AND ([Sumber] = @Original_Sumber) AND ([IDTransaksi] = @Original_IDTransaksi" & _
          ") AND ([Keterangan] = @Original_Keterangan) AND ([StatusAktif] = @Original_Statu" & _
          "sAktif) AND ([IsCredited] = @Original_IsCredited) AND ([IDJurnalKredit] = @Origi" & _
          "nal_IDJurnalKredit));" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT IDJurnalH, Tanggal, Sumber, IDTransaksi, Keteranga" & _
          "n, StatusAktif, IsCredited, IDJurnalKredit FROM JurnalH WHERE (IDJurnalH = @IDJu" & _
          "rnalH)"
      Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
      Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IDJurnalH", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IDJurnalH", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
      Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Tanggal", Global.System.Data.SqlDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Tanggal", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
      Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Sumber", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Sumber", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
      Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IDTransaksi", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IDTransaksi", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
      Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Keterangan", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Keterangan", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
      Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@StatusAktif", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "StatusAktif", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
      Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsCredited", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IsCredited", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
      Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IDJurnalKredit", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IDJurnalKredit", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
      Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IDJurnalH", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IDJurnalH", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
      Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Tanggal", Global.System.Data.SqlDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Tanggal", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
      Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Sumber", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Sumber", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
      Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IDTransaksi", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IDTransaksi", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
      Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Keterangan", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Keterangan", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
      Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_StatusAktif", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "StatusAktif", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
      Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IsCredited", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IsCredited", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
      Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IDJurnalKredit", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IDJurnalKredit", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Private Sub InitConnection()
      Me._connection = New Global.System.Data.SqlClient.SqlConnection()
      Me._connection.ConnectionString = Global.Cafe_Management.Settings.Default.connString
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Private Sub InitCommandCollection()
      Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
      Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
      Me._commandCollection(0).Connection = Me.Connection
      Me._commandCollection(0).CommandText = "SELECT IDJurnalH, Tanggal, Sumber, IDTransaksi, Keterangan, StatusAktif, IsCredit" & _
          "ed, IDJurnalKredit FROM dbo.JurnalH"
      Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
     Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)> _
    Public Overridable Overloads Function Fill(ByVal dataTable As DataSetAccounting.JurnalHDataTable) As Integer
      Me.Adapter.SelectCommand = Me.CommandCollection(0)
      If (Me.ClearBeforeFill = True) Then
        dataTable.Clear()
      End If
      Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
      Return returnValue
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
     Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)> _
    Public Overridable Overloads Function GetData() As DataSetAccounting.JurnalHDataTable
      Me.Adapter.SelectCommand = Me.CommandCollection(0)
      Dim dataTable As DataSetAccounting.JurnalHDataTable = New DataSetAccounting.JurnalHDataTable()
      Me.Adapter.Fill(dataTable)
      Return dataTable
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Public Overridable Overloads Function Update(ByVal dataTable As DataSetAccounting.JurnalHDataTable) As Integer
      Return Me.Adapter.Update(dataTable)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Public Overridable Overloads Function Update(ByVal dataSet As DataSetAccounting) As Integer
      Return Me.Adapter.Update(dataSet, "JurnalH")
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Public Overridable Overloads Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
      Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Public Overridable Overloads Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
      Return Me.Adapter.Update(dataRows)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
     Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)> _
    Public Overridable Overloads Function Delete(ByVal Original_IDJurnalH As Long, ByVal Original_Tanggal As Date, ByVal Original_Sumber As String, ByVal Original_IDTransaksi As Long, ByVal Original_Keterangan As String, ByVal Original_StatusAktif As Boolean, ByVal Original_IsCredited As Boolean, ByVal Original_IDJurnalKredit As Long) As Integer
      Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_IDJurnalH, Long)
      Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_Tanggal, Date)
      If (Original_Sumber Is Nothing) Then
        Throw New Global.System.ArgumentNullException("Original_Sumber")
      Else
        Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_Sumber, String)
      End If
      Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_IDTransaksi, Long)
      If (Original_Keterangan Is Nothing) Then
        Throw New Global.System.ArgumentNullException("Original_Keterangan")
      Else
        Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_Keterangan, String)
      End If
      Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_StatusAktif, Boolean)
      Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_IsCredited, Boolean)
      Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_IDJurnalKredit, Long)
      Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
      If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                  <> Global.System.Data.ConnectionState.Open) Then
        Me.Adapter.DeleteCommand.Connection.Open()
      End If
      Try
        Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
        Return returnValue
      Finally
        If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
          Me.Adapter.DeleteCommand.Connection.Close()
        End If
      End Try
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
     Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)> _
    Public Overridable Overloads Function Insert(ByVal IDJurnalH As Long, ByVal Tanggal As Date, ByVal Sumber As String, ByVal IDTransaksi As Long, ByVal Keterangan As String, ByVal StatusAktif As Boolean, ByVal IsCredited As Boolean, ByVal IDJurnalKredit As Long) As Integer
      Me.Adapter.InsertCommand.Parameters(0).Value = CType(IDJurnalH, Long)
      Me.Adapter.InsertCommand.Parameters(1).Value = CType(Tanggal, Date)
      If (Sumber Is Nothing) Then
        Throw New Global.System.ArgumentNullException("Sumber")
      Else
        Me.Adapter.InsertCommand.Parameters(2).Value = CType(Sumber, String)
      End If
      Me.Adapter.InsertCommand.Parameters(3).Value = CType(IDTransaksi, Long)
      If (Keterangan Is Nothing) Then
        Throw New Global.System.ArgumentNullException("Keterangan")
      Else
        Me.Adapter.InsertCommand.Parameters(4).Value = CType(Keterangan, String)
      End If
      Me.Adapter.InsertCommand.Parameters(5).Value = CType(StatusAktif, Boolean)
      Me.Adapter.InsertCommand.Parameters(6).Value = CType(IsCredited, Boolean)
      Me.Adapter.InsertCommand.Parameters(7).Value = CType(IDJurnalKredit, Long)
      Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
      If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                  <> Global.System.Data.ConnectionState.Open) Then
        Me.Adapter.InsertCommand.Connection.Open()
      End If
      Try
        Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
        Return returnValue
      Finally
        If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
          Me.Adapter.InsertCommand.Connection.Close()
        End If
      End Try
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
     Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
    Public Overridable Overloads Function Update( _
                    ByVal IDJurnalH As Long, _
                    ByVal Tanggal As Date, _
                    ByVal Sumber As String, _
                    ByVal IDTransaksi As Long, _
                    ByVal Keterangan As String, _
                    ByVal StatusAktif As Boolean, _
                    ByVal IsCredited As Boolean, _
                    ByVal IDJurnalKredit As Long, _
                    ByVal Original_IDJurnalH As Long, _
                    ByVal Original_Tanggal As Date, _
                    ByVal Original_Sumber As String, _
                    ByVal Original_IDTransaksi As Long, _
                    ByVal Original_Keterangan As String, _
                    ByVal Original_StatusAktif As Boolean, _
                    ByVal Original_IsCredited As Boolean, _
                    ByVal Original_IDJurnalKredit As Long) As Integer
      Me.Adapter.UpdateCommand.Parameters(0).Value = CType(IDJurnalH, Long)
      Me.Adapter.UpdateCommand.Parameters(1).Value = CType(Tanggal, Date)
      If (Sumber Is Nothing) Then
        Throw New Global.System.ArgumentNullException("Sumber")
      Else
        Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Sumber, String)
      End If
      Me.Adapter.UpdateCommand.Parameters(3).Value = CType(IDTransaksi, Long)
      If (Keterangan Is Nothing) Then
        Throw New Global.System.ArgumentNullException("Keterangan")
      Else
        Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Keterangan, String)
      End If
      Me.Adapter.UpdateCommand.Parameters(5).Value = CType(StatusAktif, Boolean)
      Me.Adapter.UpdateCommand.Parameters(6).Value = CType(IsCredited, Boolean)
      Me.Adapter.UpdateCommand.Parameters(7).Value = CType(IDJurnalKredit, Long)
      Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_IDJurnalH, Long)
      Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_Tanggal, Date)
      If (Original_Sumber Is Nothing) Then
        Throw New Global.System.ArgumentNullException("Original_Sumber")
      Else
        Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_Sumber, String)
      End If
      Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Original_IDTransaksi, Long)
      If (Original_Keterangan Is Nothing) Then
        Throw New Global.System.ArgumentNullException("Original_Keterangan")
      Else
        Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Original_Keterangan, String)
      End If
      Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Original_StatusAktif, Boolean)
      Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Original_IsCredited, Boolean)
      Me.Adapter.UpdateCommand.Parameters(15).Value = CType(Original_IDJurnalKredit, Long)
      Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
      If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                  <> Global.System.Data.ConnectionState.Open) Then
        Me.Adapter.UpdateCommand.Connection.Open()
      End If
      Try
        Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
        Return returnValue
      Finally
        If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
          Me.Adapter.UpdateCommand.Connection.Close()
        End If
      End Try
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
     Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
    Public Overridable Overloads Function Update(ByVal Tanggal As Date, ByVal Sumber As String, ByVal IDTransaksi As Long, ByVal Keterangan As String, ByVal StatusAktif As Boolean, ByVal IsCredited As Boolean, ByVal IDJurnalKredit As Long, ByVal Original_IDJurnalH As Long, ByVal Original_Tanggal As Date, ByVal Original_Sumber As String, ByVal Original_IDTransaksi As Long, ByVal Original_Keterangan As String, ByVal Original_StatusAktif As Boolean, ByVal Original_IsCredited As Boolean, ByVal Original_IDJurnalKredit As Long) As Integer
      Return Me.Update(Original_IDJurnalH, Tanggal, Sumber, IDTransaksi, Keterangan, StatusAktif, IsCredited, IDJurnalKredit, Original_IDJurnalH, Original_Tanggal, Original_Sumber, Original_IDTransaksi, Original_Keterangan, Original_StatusAktif, Original_IsCredited, Original_IDJurnalKredit)
    End Function
  End Class

  '''<summary>
  '''Represents the connection and commands used to retrieve and save data.
  '''</summary>
  <Global.System.ComponentModel.DesignerCategoryAttribute("code"), _
   Global.System.ComponentModel.ToolboxItem(True), _
   Global.System.ComponentModel.DataObjectAttribute(True), _
   Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & _
      ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), _
   Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
  Partial Public Class TemplateTransaksiTableAdapter
    Inherits Global.System.ComponentModel.Component

    Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter

    Private _connection As Global.System.Data.SqlClient.SqlConnection

    Private _transaction As Global.System.Data.SqlClient.SqlTransaction

    Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand

    Private _clearBeforeFill As Boolean

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public Sub New()
      MyBase.New()
      Me.ClearBeforeFill = True
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
      Get
        If (Me._adapter Is Nothing) Then
          Me.InitAdapter()
        End If
        Return Me._adapter
      End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
      Get
        If (Me._connection Is Nothing) Then
          Me.InitConnection()
        End If
        Return Me._connection
      End Get
      Set(value As Global.System.Data.SqlClient.SqlConnection)
        Me._connection = value
        If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
          Me.Adapter.InsertCommand.Connection = value
        End If
        If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
          Me.Adapter.DeleteCommand.Connection = value
        End If
        If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
          Me.Adapter.UpdateCommand.Connection = value
        End If
        Dim i As Integer = 0
        Do While (i < Me.CommandCollection.Length)
          If (Not (Me.CommandCollection(i)) Is Nothing) Then
            CType(Me.CommandCollection(i), Global.System.Data.SqlClient.SqlCommand).Connection = value
          End If
          i = (i + 1)
        Loop
      End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
      Get
        Return Me._transaction
      End Get
      Set(value As Global.System.Data.SqlClient.SqlTransaction)
        Me._transaction = value
        Dim i As Integer = 0
        Do While (i < Me.CommandCollection.Length)
          Me.CommandCollection(i).Transaction = Me._transaction
          i = (i + 1)
        Loop
        If ((Not (Me.Adapter) Is Nothing) _
                    AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
          Me.Adapter.DeleteCommand.Transaction = Me._transaction
        End If
        If ((Not (Me.Adapter) Is Nothing) _
                    AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
          Me.Adapter.InsertCommand.Transaction = Me._transaction
        End If
        If ((Not (Me.Adapter) Is Nothing) _
                    AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
          Me.Adapter.UpdateCommand.Transaction = Me._transaction
        End If
      End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
      Get
        If (Me._commandCollection Is Nothing) Then
          Me.InitCommandCollection()
        End If
        Return Me._commandCollection
      End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public Property ClearBeforeFill() As Boolean
      Get
        Return Me._clearBeforeFill
      End Get
      Set(value As Boolean)
        Me._clearBeforeFill = value
      End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Private Sub InitAdapter()
      Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
      Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
      tableMapping.SourceTable = "Table"
      tableMapping.DataSetTable = "TemplateTransaksi"
      tableMapping.ColumnMappings.Add("IDGroupTemplate", "IDGroupTemplate")
      tableMapping.ColumnMappings.Add("IDAkun", "IDAkun")
      Me._adapter.TableMappings.Add(tableMapping)
      Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
      Me._adapter.InsertCommand.Connection = Me.Connection
      Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[TemplateTransaksi] ([IDGroupTemplate], [IDAkun]) VALUES (@IDGr" & _
          "oupTemplate, @IDAkun)"
      Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
      Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IDGroupTemplate", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IDGroupTemplate", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
      Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IDAkun", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IDAkun", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Private Sub InitConnection()
      Me._connection = New Global.System.Data.SqlClient.SqlConnection()
      Me._connection.ConnectionString = Global.Cafe_Management.Settings.Default.connString
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Private Sub InitCommandCollection()
      Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
      Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
      Me._commandCollection(0).Connection = Me.Connection
      Me._commandCollection(0).CommandText = "SELECT IDGroupTemplate, IDAkun FROM dbo.TemplateTransaksi"
      Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
     Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)> _
    Public Overridable Overloads Function Fill(ByVal dataTable As DataSetAccounting.TemplateTransaksiDataTable) As Integer
      Me.Adapter.SelectCommand = Me.CommandCollection(0)
      If (Me.ClearBeforeFill = True) Then
        dataTable.Clear()
      End If
      Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
      Return returnValue
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
     Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)> _
    Public Overridable Overloads Function GetData() As DataSetAccounting.TemplateTransaksiDataTable
      Me.Adapter.SelectCommand = Me.CommandCollection(0)
      Dim dataTable As DataSetAccounting.TemplateTransaksiDataTable = New DataSetAccounting.TemplateTransaksiDataTable()
      Me.Adapter.Fill(dataTable)
      Return dataTable
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Public Overridable Overloads Function Update(ByVal dataTable As DataSetAccounting.TemplateTransaksiDataTable) As Integer
      Return Me.Adapter.Update(dataTable)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Public Overridable Overloads Function Update(ByVal dataSet As DataSetAccounting) As Integer
      Return Me.Adapter.Update(dataSet, "TemplateTransaksi")
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Public Overridable Overloads Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
      Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Public Overridable Overloads Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
      Return Me.Adapter.Update(dataRows)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
     Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)> _
    Public Overridable Overloads Function Insert(ByVal IDGroupTemplate As Integer, ByVal IDAkun As Integer) As Integer
      Me.Adapter.InsertCommand.Parameters(0).Value = CType(IDGroupTemplate, Integer)
      Me.Adapter.InsertCommand.Parameters(1).Value = CType(IDAkun, Integer)
      Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
      If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                  <> Global.System.Data.ConnectionState.Open) Then
        Me.Adapter.InsertCommand.Connection.Open()
      End If
      Try
        Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
        Return returnValue
      Finally
        If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
          Me.Adapter.InsertCommand.Connection.Close()
        End If
      End Try
    End Function
  End Class

  '''<summary>
  '''Represents the connection and commands used to retrieve and save data.
  '''</summary>
  <Global.System.ComponentModel.DesignerCategoryAttribute("code"), _
   Global.System.ComponentModel.ToolboxItem(True), _
   Global.System.ComponentModel.DataObjectAttribute(True), _
   Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & _
      ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), _
   Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
  Partial Public Class GroupAkunTableAdapter
    Inherits Global.System.ComponentModel.Component

    Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter

    Private _connection As Global.System.Data.SqlClient.SqlConnection

    Private _transaction As Global.System.Data.SqlClient.SqlTransaction

    Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand

    Private _clearBeforeFill As Boolean

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public Sub New()
      MyBase.New()
      Me.ClearBeforeFill = True
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
      Get
        If (Me._adapter Is Nothing) Then
          Me.InitAdapter()
        End If
        Return Me._adapter
      End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
      Get
        If (Me._connection Is Nothing) Then
          Me.InitConnection()
        End If
        Return Me._connection
      End Get
      Set(value As Global.System.Data.SqlClient.SqlConnection)
        Me._connection = value
        If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
          Me.Adapter.InsertCommand.Connection = value
        End If
        If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
          Me.Adapter.DeleteCommand.Connection = value
        End If
        If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
          Me.Adapter.UpdateCommand.Connection = value
        End If
        Dim i As Integer = 0
        Do While (i < Me.CommandCollection.Length)
          If (Not (Me.CommandCollection(i)) Is Nothing) Then
            CType(Me.CommandCollection(i), Global.System.Data.SqlClient.SqlCommand).Connection = value
          End If
          i = (i + 1)
        Loop
      End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
      Get
        Return Me._transaction
      End Get
      Set(value As Global.System.Data.SqlClient.SqlTransaction)
        Me._transaction = value
        Dim i As Integer = 0
        Do While (i < Me.CommandCollection.Length)
          Me.CommandCollection(i).Transaction = Me._transaction
          i = (i + 1)
        Loop
        If ((Not (Me.Adapter) Is Nothing) _
                    AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
          Me.Adapter.DeleteCommand.Transaction = Me._transaction
        End If
        If ((Not (Me.Adapter) Is Nothing) _
                    AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
          Me.Adapter.InsertCommand.Transaction = Me._transaction
        End If
        If ((Not (Me.Adapter) Is Nothing) _
                    AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
          Me.Adapter.UpdateCommand.Transaction = Me._transaction
        End If
      End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
      Get
        If (Me._commandCollection Is Nothing) Then
          Me.InitCommandCollection()
        End If
        Return Me._commandCollection
      End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public Property ClearBeforeFill() As Boolean
      Get
        Return Me._clearBeforeFill
      End Get
      Set(value As Boolean)
        Me._clearBeforeFill = value
      End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Private Sub InitAdapter()
      Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
      Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
      tableMapping.SourceTable = "Table"
      tableMapping.DataSetTable = "GroupAkun"
      tableMapping.ColumnMappings.Add("IDGroupAkun", "IDGroupAkun")
      tableMapping.ColumnMappings.Add("NoAkun", "NoAkun")
      tableMapping.ColumnMappings.Add("Nama", "Nama")
      tableMapping.ColumnMappings.Add("Posisi", "Posisi")
      Me._adapter.TableMappings.Add(tableMapping)
      Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
      Me._adapter.DeleteCommand.Connection = Me.Connection
      Me._adapter.DeleteCommand.CommandText = "dbo.Acc_GroupAkunDelete"
      Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.StoredProcedure
      Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.[Variant], 0, Global.System.Data.ParameterDirection.ReturnValue, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
      Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IDGroupAkun", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IDGroupAkun", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
      Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_NoAkun", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NoAkun", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
      Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Nama", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Nama", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
      Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Posisi", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Posisi", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
      Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
      Me._adapter.InsertCommand.Connection = Me.Connection
      Me._adapter.InsertCommand.CommandText = "dbo.Acc_GroupAkunInsert"
      Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.StoredProcedure
      Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.[Variant], 0, Global.System.Data.ParameterDirection.ReturnValue, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
      Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IDGroupAkun", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IDGroupAkun", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
      Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NoAkun", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NoAkun", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
      Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Nama", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Nama", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
      Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Posisi", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Posisi", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
      Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
      Me._adapter.UpdateCommand.Connection = Me.Connection
      Me._adapter.UpdateCommand.CommandText = "dbo.Acc_GroupAkunUpdate"
      Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.StoredProcedure
      Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.[Variant], 0, Global.System.Data.ParameterDirection.ReturnValue, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
      Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IDGroupAkun", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IDGroupAkun", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
      Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NoAkun", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NoAkun", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
      Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Nama", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Nama", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
      Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Posisi", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Posisi", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
      Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IDGroupAkun", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IDGroupAkun", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
      Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_NoAkun", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NoAkun", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
      Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Nama", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Nama", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
      Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Posisi", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Posisi", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Private Sub InitConnection()
      Me._connection = New Global.System.Data.SqlClient.SqlConnection()
      Me._connection.ConnectionString = Global.Cafe_Management.Settings.Default.connString
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Private Sub InitCommandCollection()
      Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
      Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
      Me._commandCollection(0).Connection = Me.Connection
      Me._commandCollection(0).CommandText = "dbo.Acc_GroupAkunSelect"
      Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
      Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.[Variant], 0, Global.System.Data.ParameterDirection.ReturnValue, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
     Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)> _
    Public Overridable Overloads Function Fill(ByVal dataTable As DataSetAccounting.GroupAkunDataTable) As Integer
      Me.Adapter.SelectCommand = Me.CommandCollection(0)
      If (Me.ClearBeforeFill = True) Then
        dataTable.Clear()
      End If
      Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
      Return returnValue
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
     Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)> _
    Public Overridable Overloads Function GetData() As DataSetAccounting.GroupAkunDataTable
      Me.Adapter.SelectCommand = Me.CommandCollection(0)
      Dim dataTable As DataSetAccounting.GroupAkunDataTable = New DataSetAccounting.GroupAkunDataTable()
      Me.Adapter.Fill(dataTable)
      Return dataTable
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Public Overridable Overloads Function Update(ByVal dataTable As DataSetAccounting.GroupAkunDataTable) As Integer
      Return Me.Adapter.Update(dataTable)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Public Overridable Overloads Function Update(ByVal dataSet As DataSetAccounting) As Integer
      Return Me.Adapter.Update(dataSet, "GroupAkun")
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Public Overridable Overloads Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
      Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Public Overridable Overloads Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
      Return Me.Adapter.Update(dataRows)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
     Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)> _
    Public Overridable Overloads Function Delete(ByVal Original_IDGroupAkun As Global.System.Nullable(Of Integer), ByVal Original_NoAkun As String, ByVal Original_Nama As String, ByVal Original_Posisi As String) As Integer
      If (Original_IDGroupAkun.HasValue = True) Then
        Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_IDGroupAkun.Value, Integer)
      Else
        Me.Adapter.DeleteCommand.Parameters(1).Value = Global.System.DBNull.Value
      End If
      If (Original_NoAkun Is Nothing) Then
        Throw New Global.System.ArgumentNullException("Original_NoAkun")
      Else
        Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_NoAkun, String)
      End If
      If (Original_Nama Is Nothing) Then
        Throw New Global.System.ArgumentNullException("Original_Nama")
      Else
        Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_Nama, String)
      End If
      If (Original_Posisi Is Nothing) Then
        Throw New Global.System.ArgumentNullException("Original_Posisi")
      Else
        Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_Posisi, String)
      End If
      Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
      If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                  <> Global.System.Data.ConnectionState.Open) Then
        Me.Adapter.DeleteCommand.Connection.Open()
      End If
      Try
        Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
        Return returnValue
      Finally
        If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
          Me.Adapter.DeleteCommand.Connection.Close()
        End If
      End Try
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
     Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)> _
    Public Overridable Overloads Function Insert(ByVal IDGroupAkun As Global.System.Nullable(Of Integer), ByVal NoAkun As String, ByVal Nama As String, ByVal Posisi As String) As Integer
      If (IDGroupAkun.HasValue = True) Then
        Me.Adapter.InsertCommand.Parameters(1).Value = CType(IDGroupAkun.Value, Integer)
      Else
        Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
      End If
      If (NoAkun Is Nothing) Then
        Throw New Global.System.ArgumentNullException("NoAkun")
      Else
        Me.Adapter.InsertCommand.Parameters(2).Value = CType(NoAkun, String)
      End If
      If (Nama Is Nothing) Then
        Throw New Global.System.ArgumentNullException("Nama")
      Else
        Me.Adapter.InsertCommand.Parameters(3).Value = CType(Nama, String)
      End If
      If (Posisi Is Nothing) Then
        Throw New Global.System.ArgumentNullException("Posisi")
      Else
        Me.Adapter.InsertCommand.Parameters(4).Value = CType(Posisi, String)
      End If
      Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
      If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                  <> Global.System.Data.ConnectionState.Open) Then
        Me.Adapter.InsertCommand.Connection.Open()
      End If
      Try
        Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
        Return returnValue
      Finally
        If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
          Me.Adapter.InsertCommand.Connection.Close()
        End If
      End Try
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
     Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
    Public Overridable Overloads Function Update(ByVal IDGroupAkun As Global.System.Nullable(Of Integer), ByVal NoAkun As String, ByVal Nama As String, ByVal Posisi As String, ByVal Original_IDGroupAkun As Global.System.Nullable(Of Integer), ByVal Original_NoAkun As String, ByVal Original_Nama As String, ByVal Original_Posisi As String) As Integer
      If (IDGroupAkun.HasValue = True) Then
        Me.Adapter.UpdateCommand.Parameters(1).Value = CType(IDGroupAkun.Value, Integer)
      Else
        Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
      End If
      If (NoAkun Is Nothing) Then
        Throw New Global.System.ArgumentNullException("NoAkun")
      Else
        Me.Adapter.UpdateCommand.Parameters(2).Value = CType(NoAkun, String)
      End If
      If (Nama Is Nothing) Then
        Throw New Global.System.ArgumentNullException("Nama")
      Else
        Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Nama, String)
      End If
      If (Posisi Is Nothing) Then
        Throw New Global.System.ArgumentNullException("Posisi")
      Else
        Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Posisi, String)
      End If
      If (Original_IDGroupAkun.HasValue = True) Then
        Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_IDGroupAkun.Value, Integer)
      Else
        Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
      End If
      If (Original_NoAkun Is Nothing) Then
        Throw New Global.System.ArgumentNullException("Original_NoAkun")
      Else
        Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_NoAkun, String)
      End If
      If (Original_Nama Is Nothing) Then
        Throw New Global.System.ArgumentNullException("Original_Nama")
      Else
        Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_Nama, String)
      End If
      If (Original_Posisi Is Nothing) Then
        Throw New Global.System.ArgumentNullException("Original_Posisi")
      Else
        Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_Posisi, String)
      End If
      Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
      If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                  <> Global.System.Data.ConnectionState.Open) Then
        Me.Adapter.UpdateCommand.Connection.Open()
      End If
      Try
        Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
        Return returnValue
      Finally
        If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
          Me.Adapter.UpdateCommand.Connection.Close()
        End If
      End Try
    End Function
  End Class

  '''<summary>
  '''TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
  '''</summary>
  <Global.System.ComponentModel.DesignerCategoryAttribute("code"), _
   Global.System.ComponentModel.ToolboxItem(True), _
   Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD" & _
      "esigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), _
   Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")> _
  Partial Public Class TableAdapterManager
    Inherits Global.System.ComponentModel.Component

    Private _updateOrder As UpdateOrderOption

    Private _cOATableAdapter As COATableAdapter

    Private _groupTemplateTransaksiTableAdapter As GroupTemplateTransaksiTableAdapter

    Private _jurnalDTableAdapter As JurnalDTableAdapter

    Private _jurnalHTableAdapter As JurnalHTableAdapter

    Private _templateTransaksiTableAdapter As TemplateTransaksiTableAdapter

    Private _groupAkunTableAdapter As GroupAkunTableAdapter

    Private _backupDataSetBeforeUpdate As Boolean

    Private _connection As Global.System.Data.IDbConnection

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public Property UpdateOrder() As UpdateOrderOption
      Get
        Return Me._updateOrder
      End Get
      Set(value As UpdateOrderOption)
        Me._updateOrder = value
      End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
     Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" & _
        "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" & _
        "a", "System.Drawing.Design.UITypeEditor")> _
    Public Property COATableAdapter() As COATableAdapter
      Get
        Return Me._cOATableAdapter
      End Get
      Set(value As COATableAdapter)
        Me._cOATableAdapter = value
      End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
     Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" & _
        "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" & _
        "a", "System.Drawing.Design.UITypeEditor")> _
    Public Property GroupTemplateTransaksiTableAdapter() As GroupTemplateTransaksiTableAdapter
      Get
        Return Me._groupTemplateTransaksiTableAdapter
      End Get
      Set(value As GroupTemplateTransaksiTableAdapter)
        Me._groupTemplateTransaksiTableAdapter = value
      End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
     Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" & _
        "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" & _
        "a", "System.Drawing.Design.UITypeEditor")> _
    Public Property JurnalDTableAdapter() As JurnalDTableAdapter
      Get
        Return Me._jurnalDTableAdapter
      End Get
      Set(value As JurnalDTableAdapter)
        Me._jurnalDTableAdapter = value
      End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
     Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" & _
        "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" & _
        "a", "System.Drawing.Design.UITypeEditor")> _
    Public Property JurnalHTableAdapter() As JurnalHTableAdapter
      Get
        Return Me._jurnalHTableAdapter
      End Get
      Set(value As JurnalHTableAdapter)
        Me._jurnalHTableAdapter = value
      End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
     Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" & _
        "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" & _
        "a", "System.Drawing.Design.UITypeEditor")> _
    Public Property TemplateTransaksiTableAdapter() As TemplateTransaksiTableAdapter
      Get
        Return Me._templateTransaksiTableAdapter
      End Get
      Set(value As TemplateTransaksiTableAdapter)
        Me._templateTransaksiTableAdapter = value
      End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
     Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" & _
        "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" & _
        "a", "System.Drawing.Design.UITypeEditor")> _
    Public Property GroupAkunTableAdapter() As GroupAkunTableAdapter
      Get
        Return Me._groupAkunTableAdapter
      End Get
      Set(value As GroupAkunTableAdapter)
        Me._groupAkunTableAdapter = value
      End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public Property BackupDataSetBeforeUpdate() As Boolean
      Get
        Return Me._backupDataSetBeforeUpdate
      End Get
      Set(value As Boolean)
        Me._backupDataSetBeforeUpdate = value
      End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
     Global.System.ComponentModel.Browsable(False)> _
    Public Property Connection() As Global.System.Data.IDbConnection
      Get
        If (Not (Me._connection) Is Nothing) Then
          Return Me._connection
        End If
        If ((Not (Me._cOATableAdapter) Is Nothing) _
                    AndAlso (Not (Me._cOATableAdapter.Connection) Is Nothing)) Then
          Return Me._cOATableAdapter.Connection
        End If
        If ((Not (Me._groupTemplateTransaksiTableAdapter) Is Nothing) _
                    AndAlso (Not (Me._groupTemplateTransaksiTableAdapter.Connection) Is Nothing)) Then
          Return Me._groupTemplateTransaksiTableAdapter.Connection
        End If
        If ((Not (Me._jurnalDTableAdapter) Is Nothing) _
                    AndAlso (Not (Me._jurnalDTableAdapter.Connection) Is Nothing)) Then
          Return Me._jurnalDTableAdapter.Connection
        End If
        If ((Not (Me._jurnalHTableAdapter) Is Nothing) _
                    AndAlso (Not (Me._jurnalHTableAdapter.Connection) Is Nothing)) Then
          Return Me._jurnalHTableAdapter.Connection
        End If
        If ((Not (Me._templateTransaksiTableAdapter) Is Nothing) _
                    AndAlso (Not (Me._templateTransaksiTableAdapter.Connection) Is Nothing)) Then
          Return Me._templateTransaksiTableAdapter.Connection
        End If
        If ((Not (Me._groupAkunTableAdapter) Is Nothing) _
                    AndAlso (Not (Me._groupAkunTableAdapter.Connection) Is Nothing)) Then
          Return Me._groupAkunTableAdapter.Connection
        End If
        Return Nothing
      End Get
      Set(value As Global.System.Data.IDbConnection)
        Me._connection = value
      End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
     Global.System.ComponentModel.Browsable(False)> _
    Public ReadOnly Property TableAdapterInstanceCount() As Integer
      Get
        Dim count As Integer = 0
        If (Not (Me._cOATableAdapter) Is Nothing) Then
          count = (count + 1)
        End If
        If (Not (Me._groupTemplateTransaksiTableAdapter) Is Nothing) Then
          count = (count + 1)
        End If
        If (Not (Me._jurnalDTableAdapter) Is Nothing) Then
          count = (count + 1)
        End If
        If (Not (Me._jurnalHTableAdapter) Is Nothing) Then
          count = (count + 1)
        End If
        If (Not (Me._templateTransaksiTableAdapter) Is Nothing) Then
          count = (count + 1)
        End If
        If (Not (Me._groupAkunTableAdapter) Is Nothing) Then
          count = (count + 1)
        End If
        Return count
      End Get
    End Property

    '''<summary>
    '''Update rows in top-down order.
    '''</summary>
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Private Function UpdateUpdatedRows(ByVal dataSet As DataSetAccounting, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow), ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
      Dim result As Integer = 0
      If (Not (Me._cOATableAdapter) Is Nothing) Then
        Dim updatedRows() As Global.System.Data.DataRow = dataSet.COA.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
        updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
        If ((Not (updatedRows) Is Nothing) _
                    AndAlso (0 < updatedRows.Length)) Then
          result = (result + Me._cOATableAdapter.Update(updatedRows))
          allChangedRows.AddRange(updatedRows)
        End If
      End If
      If (Not (Me._groupTemplateTransaksiTableAdapter) Is Nothing) Then
        Dim updatedRows() As Global.System.Data.DataRow = dataSet.GroupTemplateTransaksi.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
        updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
        If ((Not (updatedRows) Is Nothing) _
                    AndAlso (0 < updatedRows.Length)) Then
          result = (result + Me._groupTemplateTransaksiTableAdapter.Update(updatedRows))
          allChangedRows.AddRange(updatedRows)
        End If
      End If
      If (Not (Me._jurnalDTableAdapter) Is Nothing) Then
        Dim updatedRows() As Global.System.Data.DataRow = dataSet.JurnalD.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
        updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
        If ((Not (updatedRows) Is Nothing) _
                    AndAlso (0 < updatedRows.Length)) Then
          result = (result + Me._jurnalDTableAdapter.Update(updatedRows))
          allChangedRows.AddRange(updatedRows)
        End If
      End If
      If (Not (Me._jurnalHTableAdapter) Is Nothing) Then
        Dim updatedRows() As Global.System.Data.DataRow = dataSet.JurnalH.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
        updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
        If ((Not (updatedRows) Is Nothing) _
                    AndAlso (0 < updatedRows.Length)) Then
          result = (result + Me._jurnalHTableAdapter.Update(updatedRows))
          allChangedRows.AddRange(updatedRows)
        End If
      End If
      If (Not (Me._templateTransaksiTableAdapter) Is Nothing) Then
        Dim updatedRows() As Global.System.Data.DataRow = dataSet.TemplateTransaksi.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
        updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
        If ((Not (updatedRows) Is Nothing) _
                    AndAlso (0 < updatedRows.Length)) Then
          result = (result + Me._templateTransaksiTableAdapter.Update(updatedRows))
          allChangedRows.AddRange(updatedRows)
        End If
      End If
      If (Not (Me._groupAkunTableAdapter) Is Nothing) Then
        Dim updatedRows() As Global.System.Data.DataRow = dataSet.GroupAkun.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
        updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
        If ((Not (updatedRows) Is Nothing) _
                    AndAlso (0 < updatedRows.Length)) Then
          result = (result + Me._groupAkunTableAdapter.Update(updatedRows))
          allChangedRows.AddRange(updatedRows)
        End If
      End If
      Return result
    End Function

    '''<summary>
    '''Insert rows in top-down order.
    '''</summary>
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Private Function UpdateInsertedRows(ByVal dataSet As DataSetAccounting, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
      Dim result As Integer = 0
      If (Not (Me._cOATableAdapter) Is Nothing) Then
        Dim addedRows() As Global.System.Data.DataRow = dataSet.COA.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
        If ((Not (addedRows) Is Nothing) _
                    AndAlso (0 < addedRows.Length)) Then
          result = (result + Me._cOATableAdapter.Update(addedRows))
          allAddedRows.AddRange(addedRows)
        End If
      End If
      If (Not (Me._groupTemplateTransaksiTableAdapter) Is Nothing) Then
        Dim addedRows() As Global.System.Data.DataRow = dataSet.GroupTemplateTransaksi.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
        If ((Not (addedRows) Is Nothing) _
                    AndAlso (0 < addedRows.Length)) Then
          result = (result + Me._groupTemplateTransaksiTableAdapter.Update(addedRows))
          allAddedRows.AddRange(addedRows)
        End If
      End If
      If (Not (Me._jurnalDTableAdapter) Is Nothing) Then
        Dim addedRows() As Global.System.Data.DataRow = dataSet.JurnalD.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
        If ((Not (addedRows) Is Nothing) _
                    AndAlso (0 < addedRows.Length)) Then
          result = (result + Me._jurnalDTableAdapter.Update(addedRows))
          allAddedRows.AddRange(addedRows)
        End If
      End If
      If (Not (Me._jurnalHTableAdapter) Is Nothing) Then
        Dim addedRows() As Global.System.Data.DataRow = dataSet.JurnalH.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
        If ((Not (addedRows) Is Nothing) _
                    AndAlso (0 < addedRows.Length)) Then
          result = (result + Me._jurnalHTableAdapter.Update(addedRows))
          allAddedRows.AddRange(addedRows)
        End If
      End If
      If (Not (Me._templateTransaksiTableAdapter) Is Nothing) Then
        Dim addedRows() As Global.System.Data.DataRow = dataSet.TemplateTransaksi.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
        If ((Not (addedRows) Is Nothing) _
                    AndAlso (0 < addedRows.Length)) Then
          result = (result + Me._templateTransaksiTableAdapter.Update(addedRows))
          allAddedRows.AddRange(addedRows)
        End If
      End If
      If (Not (Me._groupAkunTableAdapter) Is Nothing) Then
        Dim addedRows() As Global.System.Data.DataRow = dataSet.GroupAkun.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
        If ((Not (addedRows) Is Nothing) _
                    AndAlso (0 < addedRows.Length)) Then
          result = (result + Me._groupAkunTableAdapter.Update(addedRows))
          allAddedRows.AddRange(addedRows)
        End If
      End If
      Return result
    End Function

    '''<summary>
    '''Delete rows in bottom-up order.
    '''</summary>
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Private Function UpdateDeletedRows(ByVal dataSet As DataSetAccounting, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
      Dim result As Integer = 0
      If (Not (Me._groupAkunTableAdapter) Is Nothing) Then
        Dim deletedRows() As Global.System.Data.DataRow = dataSet.GroupAkun.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
        If ((Not (deletedRows) Is Nothing) _
                    AndAlso (0 < deletedRows.Length)) Then
          result = (result + Me._groupAkunTableAdapter.Update(deletedRows))
          allChangedRows.AddRange(deletedRows)
        End If
      End If
      If (Not (Me._templateTransaksiTableAdapter) Is Nothing) Then
        Dim deletedRows() As Global.System.Data.DataRow = dataSet.TemplateTransaksi.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
        If ((Not (deletedRows) Is Nothing) _
                    AndAlso (0 < deletedRows.Length)) Then
          result = (result + Me._templateTransaksiTableAdapter.Update(deletedRows))
          allChangedRows.AddRange(deletedRows)
        End If
      End If
      If (Not (Me._jurnalHTableAdapter) Is Nothing) Then
        Dim deletedRows() As Global.System.Data.DataRow = dataSet.JurnalH.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
        If ((Not (deletedRows) Is Nothing) _
                    AndAlso (0 < deletedRows.Length)) Then
          result = (result + Me._jurnalHTableAdapter.Update(deletedRows))
          allChangedRows.AddRange(deletedRows)
        End If
      End If
      If (Not (Me._jurnalDTableAdapter) Is Nothing) Then
        Dim deletedRows() As Global.System.Data.DataRow = dataSet.JurnalD.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
        If ((Not (deletedRows) Is Nothing) _
                    AndAlso (0 < deletedRows.Length)) Then
          result = (result + Me._jurnalDTableAdapter.Update(deletedRows))
          allChangedRows.AddRange(deletedRows)
        End If
      End If
      If (Not (Me._groupTemplateTransaksiTableAdapter) Is Nothing) Then
        Dim deletedRows() As Global.System.Data.DataRow = dataSet.GroupTemplateTransaksi.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
        If ((Not (deletedRows) Is Nothing) _
                    AndAlso (0 < deletedRows.Length)) Then
          result = (result + Me._groupTemplateTransaksiTableAdapter.Update(deletedRows))
          allChangedRows.AddRange(deletedRows)
        End If
      End If
      If (Not (Me._cOATableAdapter) Is Nothing) Then
        Dim deletedRows() As Global.System.Data.DataRow = dataSet.COA.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
        If ((Not (deletedRows) Is Nothing) _
                    AndAlso (0 < deletedRows.Length)) Then
          result = (result + Me._cOATableAdapter.Update(deletedRows))
          allChangedRows.AddRange(deletedRows)
        End If
      End If
      Return result
    End Function

    '''<summary>
    '''Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
    '''</summary>
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Private Function GetRealUpdatedRows(ByVal updatedRows() As Global.System.Data.DataRow, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Global.System.Data.DataRow()
      If ((updatedRows Is Nothing) _
                  OrElse (updatedRows.Length < 1)) Then
        Return updatedRows
      End If
      If ((allAddedRows Is Nothing) _
                  OrElse (allAddedRows.Count < 1)) Then
        Return updatedRows
      End If
      Dim realUpdatedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)()
      Dim i As Integer = 0
      Do While (i < updatedRows.Length)
        Dim row As Global.System.Data.DataRow = updatedRows(i)
        If (allAddedRows.Contains(row) = False) Then
          realUpdatedRows.Add(row)
        End If
        i = (i + 1)
      Loop
      Return realUpdatedRows.ToArray
    End Function

    '''<summary>
    '''Update all changes to the dataset.
    '''</summary>
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public Overridable Function UpdateAll(ByVal dataSet As DataSetAccounting) As Integer
      If (dataSet Is Nothing) Then
        Throw New Global.System.ArgumentNullException("dataSet")
      End If
      If (dataSet.HasChanges = False) Then
        Return 0
      End If
      If ((Not (Me._cOATableAdapter) Is Nothing) _
                  AndAlso (Me.MatchTableAdapterConnection(Me._cOATableAdapter.Connection) = False)) Then
        Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" & _
                "tring.")
      End If
      If ((Not (Me._groupTemplateTransaksiTableAdapter) Is Nothing) _
                  AndAlso (Me.MatchTableAdapterConnection(Me._groupTemplateTransaksiTableAdapter.Connection) = False)) Then
        Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" & _
                "tring.")
      End If
      If ((Not (Me._jurnalDTableAdapter) Is Nothing) _
                  AndAlso (Me.MatchTableAdapterConnection(Me._jurnalDTableAdapter.Connection) = False)) Then
        Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" & _
                "tring.")
      End If
      If ((Not (Me._jurnalHTableAdapter) Is Nothing) _
                  AndAlso (Me.MatchTableAdapterConnection(Me._jurnalHTableAdapter.Connection) = False)) Then
        Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" & _
                "tring.")
      End If
      If ((Not (Me._templateTransaksiTableAdapter) Is Nothing) _
                  AndAlso (Me.MatchTableAdapterConnection(Me._templateTransaksiTableAdapter.Connection) = False)) Then
        Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" & _
                "tring.")
      End If
      If ((Not (Me._groupAkunTableAdapter) Is Nothing) _
                  AndAlso (Me.MatchTableAdapterConnection(Me._groupAkunTableAdapter.Connection) = False)) Then
        Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" & _
                "tring.")
      End If
      Dim workConnection As Global.System.Data.IDbConnection = Me.Connection
      If (workConnection Is Nothing) Then
        Throw New Global.System.ApplicationException("TableAdapterManager contains no connection information. Set each TableAdapterMana" & _
                "ger TableAdapter property to a valid TableAdapter instance.")
      End If
      Dim workConnOpened As Boolean = False
      If ((workConnection.State And Global.System.Data.ConnectionState.Broken) _
                  = Global.System.Data.ConnectionState.Broken) Then
        workConnection.Close()
      End If
      If (workConnection.State = Global.System.Data.ConnectionState.Closed) Then
        workConnection.Open()
        workConnOpened = True
      End If
      Dim workTransaction As Global.System.Data.IDbTransaction = workConnection.BeginTransaction
      If (workTransaction Is Nothing) Then
        Throw New Global.System.ApplicationException("The transaction cannot begin. The current data connection does not support transa" & _
                "ctions or the current state is not allowing the transaction to begin.")
      End If
      Dim allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)()
      Dim allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)()
      Dim adaptersWithAcceptChangesDuringUpdate As Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter) = New Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter)()
      Dim revertConnections As Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection) = New Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection)()
      Dim result As Integer = 0
      Dim backupDataSet As Global.System.Data.DataSet = Nothing
      If Me.BackupDataSetBeforeUpdate Then
        backupDataSet = New Global.System.Data.DataSet()
        backupDataSet.Merge(dataSet)
      End If
      Try
        '---- Prepare for update -----------
        '
        If (Not (Me._cOATableAdapter) Is Nothing) Then
          revertConnections.Add(Me._cOATableAdapter, Me._cOATableAdapter.Connection)
          Me._cOATableAdapter.Connection = CType(workConnection, Global.System.Data.SqlClient.SqlConnection)
          Me._cOATableAdapter.Transaction = CType(workTransaction, Global.System.Data.SqlClient.SqlTransaction)
          If Me._cOATableAdapter.Adapter.AcceptChangesDuringUpdate Then
            Me._cOATableAdapter.Adapter.AcceptChangesDuringUpdate = False
            adaptersWithAcceptChangesDuringUpdate.Add(Me._cOATableAdapter.Adapter)
          End If
        End If
        If (Not (Me._groupTemplateTransaksiTableAdapter) Is Nothing) Then
          revertConnections.Add(Me._groupTemplateTransaksiTableAdapter, Me._groupTemplateTransaksiTableAdapter.Connection)
          Me._groupTemplateTransaksiTableAdapter.Connection = CType(workConnection, Global.System.Data.SqlClient.SqlConnection)
          Me._groupTemplateTransaksiTableAdapter.Transaction = CType(workTransaction, Global.System.Data.SqlClient.SqlTransaction)
          If Me._groupTemplateTransaksiTableAdapter.Adapter.AcceptChangesDuringUpdate Then
            Me._groupTemplateTransaksiTableAdapter.Adapter.AcceptChangesDuringUpdate = False
            adaptersWithAcceptChangesDuringUpdate.Add(Me._groupTemplateTransaksiTableAdapter.Adapter)
          End If
        End If
        If (Not (Me._jurnalDTableAdapter) Is Nothing) Then
          revertConnections.Add(Me._jurnalDTableAdapter, Me._jurnalDTableAdapter.Connection)
          Me._jurnalDTableAdapter.Connection = CType(workConnection, Global.System.Data.SqlClient.SqlConnection)
          Me._jurnalDTableAdapter.Transaction = CType(workTransaction, Global.System.Data.SqlClient.SqlTransaction)
          If Me._jurnalDTableAdapter.Adapter.AcceptChangesDuringUpdate Then
            Me._jurnalDTableAdapter.Adapter.AcceptChangesDuringUpdate = False
            adaptersWithAcceptChangesDuringUpdate.Add(Me._jurnalDTableAdapter.Adapter)
          End If
        End If
        If (Not (Me._jurnalHTableAdapter) Is Nothing) Then
          revertConnections.Add(Me._jurnalHTableAdapter, Me._jurnalHTableAdapter.Connection)
          Me._jurnalHTableAdapter.Connection = CType(workConnection, Global.System.Data.SqlClient.SqlConnection)
          Me._jurnalHTableAdapter.Transaction = CType(workTransaction, Global.System.Data.SqlClient.SqlTransaction)
          If Me._jurnalHTableAdapter.Adapter.AcceptChangesDuringUpdate Then
            Me._jurnalHTableAdapter.Adapter.AcceptChangesDuringUpdate = False
            adaptersWithAcceptChangesDuringUpdate.Add(Me._jurnalHTableAdapter.Adapter)
          End If
        End If
        If (Not (Me._templateTransaksiTableAdapter) Is Nothing) Then
          revertConnections.Add(Me._templateTransaksiTableAdapter, Me._templateTransaksiTableAdapter.Connection)
          Me._templateTransaksiTableAdapter.Connection = CType(workConnection, Global.System.Data.SqlClient.SqlConnection)
          Me._templateTransaksiTableAdapter.Transaction = CType(workTransaction, Global.System.Data.SqlClient.SqlTransaction)
          If Me._templateTransaksiTableAdapter.Adapter.AcceptChangesDuringUpdate Then
            Me._templateTransaksiTableAdapter.Adapter.AcceptChangesDuringUpdate = False
            adaptersWithAcceptChangesDuringUpdate.Add(Me._templateTransaksiTableAdapter.Adapter)
          End If
        End If
        If (Not (Me._groupAkunTableAdapter) Is Nothing) Then
          revertConnections.Add(Me._groupAkunTableAdapter, Me._groupAkunTableAdapter.Connection)
          Me._groupAkunTableAdapter.Connection = CType(workConnection, Global.System.Data.SqlClient.SqlConnection)
          Me._groupAkunTableAdapter.Transaction = CType(workTransaction, Global.System.Data.SqlClient.SqlTransaction)
          If Me._groupAkunTableAdapter.Adapter.AcceptChangesDuringUpdate Then
            Me._groupAkunTableAdapter.Adapter.AcceptChangesDuringUpdate = False
            adaptersWithAcceptChangesDuringUpdate.Add(Me._groupAkunTableAdapter.Adapter)
          End If
        End If
        '
        '---- Perform updates -----------
        '
        If (Me.UpdateOrder = UpdateOrderOption.UpdateInsertDelete) Then
          result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
          result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
        Else
          result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
          result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
        End If
        result = (result + Me.UpdateDeletedRows(dataSet, allChangedRows))
        '
        '---- Commit updates -----------
        '
        workTransaction.Commit()
        If (0 < allAddedRows.Count) Then
          Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
          allAddedRows.CopyTo(rows)
          Dim i As Integer = 0
          Do While (i < rows.Length)
            Dim row As Global.System.Data.DataRow = rows(i)
            row.AcceptChanges()
            i = (i + 1)
          Loop
        End If
        If (0 < allChangedRows.Count) Then
          Dim rows((allChangedRows.Count) - 1) As Global.System.Data.DataRow
          allChangedRows.CopyTo(rows)
          Dim i As Integer = 0
          Do While (i < rows.Length)
            Dim row As Global.System.Data.DataRow = rows(i)
            row.AcceptChanges()
            i = (i + 1)
          Loop
        End If
      Catch ex As Global.System.Exception
        workTransaction.Rollback()
        '---- Restore the dataset -----------
        If Me.BackupDataSetBeforeUpdate Then
          Global.System.Diagnostics.Debug.Assert((Not (backupDataSet) Is Nothing))
          dataSet.Clear()
          dataSet.Merge(backupDataSet)
        Else
          If (0 < allAddedRows.Count) Then
            Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
            allAddedRows.CopyTo(rows)
            Dim i As Integer = 0
            Do While (i < rows.Length)
              Dim row As Global.System.Data.DataRow = rows(i)
              row.AcceptChanges()
              row.SetAdded()
              i = (i + 1)
            Loop
          End If
        End If
        Throw ex
      Finally
        If workConnOpened Then
          workConnection.Close()
        End If
        If (Not (Me._cOATableAdapter) Is Nothing) Then
          Me._cOATableAdapter.Connection = CType(revertConnections(Me._cOATableAdapter), Global.System.Data.SqlClient.SqlConnection)
          Me._cOATableAdapter.Transaction = Nothing
        End If
        If (Not (Me._groupTemplateTransaksiTableAdapter) Is Nothing) Then
          Me._groupTemplateTransaksiTableAdapter.Connection = CType(revertConnections(Me._groupTemplateTransaksiTableAdapter), Global.System.Data.SqlClient.SqlConnection)
          Me._groupTemplateTransaksiTableAdapter.Transaction = Nothing
        End If
        If (Not (Me._jurnalDTableAdapter) Is Nothing) Then
          Me._jurnalDTableAdapter.Connection = CType(revertConnections(Me._jurnalDTableAdapter), Global.System.Data.SqlClient.SqlConnection)
          Me._jurnalDTableAdapter.Transaction = Nothing
        End If
        If (Not (Me._jurnalHTableAdapter) Is Nothing) Then
          Me._jurnalHTableAdapter.Connection = CType(revertConnections(Me._jurnalHTableAdapter), Global.System.Data.SqlClient.SqlConnection)
          Me._jurnalHTableAdapter.Transaction = Nothing
        End If
        If (Not (Me._templateTransaksiTableAdapter) Is Nothing) Then
          Me._templateTransaksiTableAdapter.Connection = CType(revertConnections(Me._templateTransaksiTableAdapter), Global.System.Data.SqlClient.SqlConnection)
          Me._templateTransaksiTableAdapter.Transaction = Nothing
        End If
        If (Not (Me._groupAkunTableAdapter) Is Nothing) Then
          Me._groupAkunTableAdapter.Connection = CType(revertConnections(Me._groupAkunTableAdapter), Global.System.Data.SqlClient.SqlConnection)
          Me._groupAkunTableAdapter.Transaction = Nothing
        End If
        If (0 < adaptersWithAcceptChangesDuringUpdate.Count) Then
          Dim adapters((adaptersWithAcceptChangesDuringUpdate.Count) - 1) As Global.System.Data.Common.DataAdapter
          adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters)
          Dim i As Integer = 0
          Do While (i < adapters.Length)
            Dim adapter As Global.System.Data.Common.DataAdapter = adapters(i)
            adapter.AcceptChangesDuringUpdate = True
            i = (i + 1)
          Loop
        End If
      End Try
      Return result
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Protected Overridable Sub SortSelfReferenceRows(ByVal rows() As Global.System.Data.DataRow, ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
      Global.System.Array.Sort(Of Global.System.Data.DataRow)(rows, New SelfReferenceComparer(relation, childFirst))
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Protected Overridable Function MatchTableAdapterConnection(ByVal inputConnection As Global.System.Data.IDbConnection) As Boolean
      If (Not (Me._connection) Is Nothing) Then
        Return True
      End If
      If ((Me.Connection Is Nothing) _
                  OrElse (inputConnection Is Nothing)) Then
        Return True
      End If
      If String.Equals(Me.Connection.ConnectionString, inputConnection.ConnectionString, Global.System.StringComparison.Ordinal) Then
        Return True
      End If
      Return False
    End Function

    '''<summary>
    '''Update Order Option
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public Enum UpdateOrderOption

      InsertUpdateDelete = 0

      UpdateInsertDelete = 1
    End Enum

    '''<summary>
    '''Used to sort self-referenced table's rows
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Private Class SelfReferenceComparer
      Inherits Object
      Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow)

      Private _relation As Global.System.Data.DataRelation

      Private _childFirst As Integer

      <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
       Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
      Friend Sub New(ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
        MyBase.New()
        Me._relation = relation
        If childFirst Then
          Me._childFirst = -1
        Else
          Me._childFirst = 1
        End If
      End Sub

      <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
       Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
      Private Function GetRoot(ByVal row As Global.System.Data.DataRow, ByRef distance As Integer) As Global.System.Data.DataRow
        Global.System.Diagnostics.Debug.Assert((Not (row) Is Nothing))
        Dim root As Global.System.Data.DataRow = row
        distance = 0

        Dim traversedRows As Global.System.Collections.Generic.IDictionary(Of Global.System.Data.DataRow, Global.System.Data.DataRow) = New Global.System.Collections.Generic.Dictionary(Of Global.System.Data.DataRow, Global.System.Data.DataRow)()
        traversedRows(row) = row

        Dim parent As Global.System.Data.DataRow = row.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

        Do While ((Not (parent) Is Nothing) _
                    AndAlso (traversedRows.ContainsKey(parent) = False))
          distance = (distance + 1)
          root = parent
          traversedRows(parent) = parent
          parent = parent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

        Loop

        If (distance = 0) Then
          traversedRows.Clear()
          traversedRows(row) = row
          parent = row.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)

          Do While ((Not (parent) Is Nothing) _
                      AndAlso (traversedRows.ContainsKey(parent) = False))
            distance = (distance + 1)
            root = parent
            traversedRows(parent) = parent
            parent = parent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)

          Loop
        End If

        Return root
      End Function

      <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
       Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
      Public Function Compare(ByVal row1 As Global.System.Data.DataRow, ByVal row2 As Global.System.Data.DataRow) As Integer Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow).Compare
        If Object.ReferenceEquals(row1, row2) Then
          Return 0
        End If
        If (row1 Is Nothing) Then
          Return -1
        End If
        If (row2 Is Nothing) Then
          Return 1
        End If

        Dim distance1 As Integer = 0
        Dim root1 As Global.System.Data.DataRow = Me.GetRoot(row1, distance1)

        Dim distance2 As Integer = 0
        Dim root2 As Global.System.Data.DataRow = Me.GetRoot(row2, distance2)

        If Object.ReferenceEquals(root1, root2) Then
          Return (Me._childFirst * distance1.CompareTo(distance2))
        Else
          Global.System.Diagnostics.Debug.Assert(((Not (root1.Table) Is Nothing) _
                          AndAlso (Not (root2.Table) Is Nothing)))
          If (root1.Table.Rows.IndexOf(root1) < root2.Table.Rows.IndexOf(root2)) Then
            Return -1
          Else
            Return 1
          End If
        End If
      End Function
    End Class
  End Class
End Namespace
